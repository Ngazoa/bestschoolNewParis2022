package intendancee;

import etablissement.Curseur;
import etablissement.ajout_eleve;

import etablissement.connexion;
import etablissement.definition_des_periodes_de_remplissages_notes;
import etablissement.impressionmodel_11;
import etablissement.memoire1;
import etablissement.memoire;
import etablissement.reactivation_enseignant;
import etablissement.reactivvation_eleve;
import java.awt.BorderLayout;
import java.util.Date;
import java.text.SimpleDateFormat;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;
import static javax.swing.JOptionPane.showConfirmDialog;

/**
 *
 * @author Michelle Wafo
 */
public class ProviseurEcole extends javax.swing.JFrame {

    DefaultTableModel model, model1;
    org.json.JSONArray jsonArray;
    String choixjtabnle;
    JMenuItem daterempli, historempli, aPropos, ts_enseignants, ts_eleves, ts_eles_classe, reac, reac2;
    JMenuItem defpension, estimpension, ajout_enseignant, supp_enseignant, desactiver_eleve, desactiver_enseignant, ajouter_blame_enseignant, ajouter_blame_eleve, ajout_eleve;
    String[] clas;

    String inline = null, action;
    int paye = 0, part1 = 0, part2 = 0, imp = 0;
    JMenuItem tt_ecole, modifier_compte, consulter_ele_classe, ajout_sortie, ajout_entree, valider_sortie, valiser_entree, consulter_sortie, consulter_entree, eleve_insolvable, tous_eleve;
    String urObjctInCell = null, conf = null;
    int x = 0, total = 0;
    String nom = null;

    /**
     *
     */
    public ProviseurEcole() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        effectif = new javax.swing.JLabel();
        user = new javax.swing.JLabel();
        classe = new javax.swing.JComboBox<>();
        impression = new javax.swing.JButton();
        deconnexion = new javax.swing.JButton();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        solde = new javax.swing.JMenu();
        pension = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        personnel = new javax.swing.JMenu();
        remplissage = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(0, 102, 102));
        setIconImage(new ImageIcon(memoire.setup).getImage());
        setName("provi"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        effectif.setFont(new java.awt.Font("Segoe Script", 0, 14)); // NOI18N

        user.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N

        classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "    " }));
        classe.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                classeItemStateChanged(evt);
            }
        });

        impression.setText("imprimer");
        impression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impressionActionPerformed(evt);
            }
        });

        deconnexion.setText("Sortir");
        deconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnexionActionPerformed(evt);
            }
        });

        jInternalFrame2.setVisible(true);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(32);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jMenu1.setText("Gestion des entrées de fonds");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("            Gestion des sortiesde fonds");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("    Gestion des élèves");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("      Mon compte     ");
        jMenuBar1.add(jMenu4);

        solde.setText("   Solde");
        solde.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                soldeMouseClicked(evt);
            }
        });
        jMenuBar1.add(solde);

        pension.setText("        Gestion pansion scolaire");

        jMenuItem3.setText("Definir niveaux/Cycle");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        pension.add(jMenuItem3);

        jMenuBar1.add(pension);

        personnel.setText("        Ajouter personnel");
        personnel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                personnelMouseClicked(evt);
            }
        });
        personnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personnelActionPerformed(evt);
            }
        });
        jMenuBar1.add(personnel);

        remplissage.setText("                Periode de remplissage des notes");

        jMenuItem1.setText("Definition des periodes");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        remplissage.add(jMenuItem1);

        jMenuItem2.setText("Historique");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        remplissage.add(jMenuItem2);

        jMenuBar1.add(remplissage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deconnexion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(impression)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 618, Short.MAX_VALUE)
                        .addComponent(user)
                        .addGap(235, 235, 235))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(effectif)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jInternalFrame2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(user)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(impression))))
                    .addComponent(deconnexion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(effectif))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

//this.setLocationRelativeTo(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened
    private void listeeleclasse() throws IOException, JSONException {

        String url = memoire.liste_periode_remplissage_notes;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=";

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
        int totalEleves = jsonArray.length();
        List<impressionmodel_11> eleve = new ArrayList<impressionmodel_11>();
        effectif.setText("Effectif total : " + totalEleves);

        for (int i = 0; i < jsonArray.length(); i++) {
            impressionmodel_11 ed = new impressionmodel_11();

            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_periode");
            String nom_eleve = s11.getString("periode");
            String datene = s11.getString("debut");
            String sexe = s11.getString("fin");

            String deb = new SimpleDateFormat("EEEE, dd MMMM yyyy").format(Date.parse(datene));
            String fin = new SimpleDateFormat("EEEE, dd MMMM yyyy").format(Date.parse(sexe));

            ed.nom(nom_eleve);
            ed.date(deb);
            ed.sexe(fin);
            // pour absences non justifiees
            ed.note1(code); //pour absences non justifiees
            eleve.add(ed);
        }
        in.close();
        String[] columnNames = {"CODE", "Periode ", "Date debut remplissage ", "Date fin remplissage "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        for (final impressionmodel_11 detail : eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.note1());
            row.add(detail.nom());
            row.add(detail.date());
            row.add(detail.sexe());

            //            row.add(detail.getnote2());
            model.addRow(row);
        }
        jTable1.setModel(model);

        Curseur.jablestopWaitCursor(jInternalFrame2);
    }
    private void impressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impressionActionPerformed

        new PrintTable();          // TODO add your handling code here:
    }//GEN-LAST:event_impressionActionPerformed

    private void soldeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_soldeMouseClicked
        try {

            solde();

        } catch (IOException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:        // TODO add your handling code here:        // TODO add your handling code here:        // TODO add your handling code here:        // TODO add your handling code here:        // TODO add your handling code here:        // TODO add your handling code here:        // TODO add your handling code here:
    }//GEN-LAST:event_soldeMouseClicked

    private void deconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconnexionActionPerformed

        int option = showConfirmDialog(null, "Voulez-vous quitter cette page ?", "Arrêt de la connexion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {
            JFrame Page_enseignant = new connexion();
            Page_enseignant.setVisible(true);
        }
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_deconnexionActionPerformed

    private void personnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personnelActionPerformed

        try {
            //zd = new ajout_user(null, "Modification", true);

            ajouter_user zd = new ajouter_user(null, "Ajouter un nouveau personnel administratif", true);
            infoPersonnel_administratif zInfo = zd.showZDialog();

            JOptionPane jop = new JOptionPane();
            int option;
            option = showConfirmDialog(null, zInfo.toString(), "Informations de l'enseignant ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {
                System.out.println("Causes toujours 1");

                memoire.nom_conserve = memoire.nom;
                memoire.tel_conserve = memoire.telephone;

                try {
                    if (!memoire.nom.equals("")) {

                        enregistrer_personnel(memoire.nom, memoire.sexe, memoire.cathegorie, memoire.telephone, memoire.classe, memoire.matiere);
                    }
                } catch (JSONException ex) {

                } catch (IOException ex) {

                }

            }
        } catch (IOException ex) {
            System.out.println("Causes toujours 1: " + ex);

            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            System.out.println("Causes toujours 2: " + ex);

            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }

        Curseur.jablestopWaitCursor(jInternalFrame2);


    }//GEN-LAST:event_personnelActionPerformed

    private void personnelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personnelMouseClicked

        try {
            //zd = new ajout_user(null, "Modification", true);

            ajouter_user zd = new ajouter_user(null, "Ajouter un nouveau personnel administratif", true);
            infoPersonnel_administratif zInfo = zd.showZDialog();

            JOptionPane jop = new JOptionPane();
            int option;
            option = showConfirmDialog(null, zInfo.toString(), "Informations de l'enseignant ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {
                System.out.println("Causes toujours 1");

                memoire.nom_conserve = memoire.nom;
                memoire.tel_conserve = memoire.telephone;

                try {
                    if (!memoire.nom.equals("")) {

                        enregistrer_personnel(memoire.nom, memoire.sexe, memoire.cathegorie, memoire.telephone, memoire.classe, memoire.matiere);
                    }
                } catch (JSONException ex) {

                } catch (IOException ex) {

                }

            }
        } catch (IOException ex) {
            System.out.println("Causes toujours 1: " + ex);

            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            System.out.println("Causes toujours 2: " + ex);

            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }

        Curseur.jablestopWaitCursor(jInternalFrame2);

        // TODO add your handling code here:
    }//GEN-LAST:event_personnelMouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        if ("sortie".equals(choixjtabnle)) {
            JTable t = (JTable) evt.getSource();
            x = t.getSelectedRow();
            final int y = t.getSelectedColumn();
            urObjctInCell = (String) t.getValueAt(x, 0);
            System.out.println("Code : " + urObjctInCell);
            nom = (String) t.getValueAt(x, 1);
            conf = (String) t.getValueAt(x, 7);

            int option;

            if (!conf.equals("<html> <font size=\"3\" face=\"verdana\" color=\"red\"> VALIDE  !</font></html>")) {
                option = JOptionPane.showConfirmDialog(null, "Confirmez vous le transfert de : " + nom, "Transfert de fonds", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                if (option == JOptionPane.OK_OPTION) {
                    model1.setValueAt("<html> <font size=\"3\" face=\"verdana\" color=\"red\"> VALIDE  !</font></html>", x, 7);
                    try {
                        Validation(urObjctInCell);
                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            } else {
                JOptionPane.showConfirmDialog(null, "Vous avez deja effectue cette operation  \n CREDITATION DES FONDS", "CREDITATION DES FONDS ", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            }

            Curseur.jablestopWaitCursor(jInternalFrame2);

        } else {

            JTable t = (JTable) evt.getSource();
            x = t.getSelectedRow();
            final int y = t.getSelectedColumn();
            urObjctInCell = (String) t.getValueAt(x, 0);
            nom = (String) t.getValueAt(x, 1);
            conf = (String) t.getValueAt(x, 7);

            System.out.println("Code : " + urObjctInCell);
            int option;
            if (!conf.equals("<html>Action <font size=\"3\" face=\"verdana\" color=\"blue\"> VALIDE  !</font></html>")) {
                option = JOptionPane.showConfirmDialog(null, "Confirmez vous la demande de : " + nom, "Transfert de fonds", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                if (option == JOptionPane.OK_OPTION) {

                    model.setValueAt("<html>Action <font size=\"3\" face=\"verdana\" color=\"blue\"> VALIDE  !</font></html>", x, 7);
                    try {
                        Validation(urObjctInCell);
                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            } else {
                JOptionPane.showConfirmDialog(null, "Vous avez deja effectue cette operation", "CREDITATION DES FONDS ", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            }

            Curseur.jablestopWaitCursor(jInternalFrame2);

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        user.setText(" Definition des periodes de remplissage des notes ");
        setTitle(" Definition des periodes de remplissage des notes ");
        memoire_intendance.titre = getTitle();

        Curseur.jtablestartWaitCursor(jInternalFrame2);
        user.setForeground(Color.blue);

        action = "ajout";
        try {

            definition_des_periodes_de_remplissages_notes zd = null;
            try {
                zd = new definition_des_periodes_de_remplissages_notes(null, " Definition des periodes de remplissage des notes  ", true);
            } catch (JSONException ex) {
                Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
            }
            etablissement.infoperiode zInfo = zd.showZDialog();
            int option;
            option = JOptionPane.showConfirmDialog(null, zInfo.toString(), "Confirmez-vous  ces dates de remplissage  ?", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {

                Ajoutperioderemplissage();

            }
        } catch (IOException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }

        Curseur.jablestopWaitCursor(jInternalFrame2);
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            listeeleclasse();
        } catch (IOException | JSONException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            definircyclepaiement definition_inscriptions = new definircyclepaiement(null, "Creation des niveaux de scolarites ", true);
            definition_inscriptions.showZDialog();
        } catch (IOException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    private void cycleClasse() throws IOException, JSONException {
        String url = memoire.cycle_classeChoisie;
        try {
            URL urln = new URL(url);
            HttpURLConnection con = (HttpURLConnection) urln.openConnection();
            con.setRequestMethod("POST");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

            String urlParameters = "classe=" + classe.getSelectedItem().toString();

            // Send post request
            con.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();

            int responseCode = con.getResponseCode();
            System.out.println("\nSending 'POST' request to URL : " + url);
            System.out.println("Post parameters : " + urlParameters);
            System.out.println("Response Code : " + responseCode);

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));

            System.out.println(urlParameters);

            String inputLine, inline = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
            String nom_eleve, etat, prix;

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject eleve = jsonArray.getJSONObject(i);

                memoire.note9 = eleve.getString("cycle");

                // cycle.addItem(nom_eleve);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erreur survenue (" + e + ") Aucun niveau de paiement detecté \nVeuillez vous rassurez d'avoir au préalable definie \nles niveaux ou cycles de paiement ");

        }
    }

    private void listefrais() throws IOException, JSONException {
        String url = memoire.liste_cycle;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + memoire.note9;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }
        System.out.println(inline);
        try {

            org.json.JSONObject bj = new JSONObject(inline);
            org.json.JSONArray jsonArray = bj.getJSONArray("victoire");

            String nom_eleve, etat, prix;
            memoire_intendance.reste = 0;
            int totalpayeparclasse = 0;
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject eleve = jsonArray.getJSONObject(i);
                etat = eleve.getString("etat");
                prix = eleve.getString("prix");
                if (etat.equals("1")) {
                    totalpayeparclasse += Integer.parseInt(prix);
                }
            }
            memoire_intendance.reste = totalpayeparclasse;

        } catch (Exception e) {
        }
        in.close();

    }
    private void classeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_classeItemStateChanged

        if (!classe.getSelectedItem().toString().equals("Classes diponibles")) {
            try {
                cycleClasse();
                listefrais();

            } catch (IOException ex) {
                Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException ex) {
                Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_classeItemStateChanged

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        this.setExtendedState(ProviseurEcole.MAXIMIZED_BOTH);
        jInternalFrame2.getContentPane().setBackground(Color.blue);

        //solde.setVisible(false);
        deconnexion.setBackground(Color.red);
        deconnexion.setForeground(Color.white);
        user.setText(" Bienvenue Mr le proviseur : <<  " + memoire_intendance.nom_user + "  >>");
        user.setForeground(Color.BLACK);
        ajout_sortie = new JMenuItem("Ajouter une sortie de fonds");
        reac2 = new JMenuItem("Resactiver Enseignant");
        reac = new JMenuItem("Reactiviver un eleve");

        ajout_entree = new JMenuItem("Ajouter une entrée de fonds");
        valider_sortie = new JMenuItem("Valider les sorties dispo");
        valiser_entree = new JMenuItem("Valider les entrées dispo");
        consulter_sortie = new JMenuItem("Toutes les sorties de fonds approuvées");
        consulter_entree = new JMenuItem("Les entrées approuvées");
        eleve_insolvable = new JMenuItem("Tous les élèves insolvables");
        tous_eleve = new JMenuItem("liste de tous les élèves par classe");
        consulter_ele_classe = new JMenuItem("élèves insolvables par classe");
        modifier_compte = new JMenuItem("Modifier mot de passe");
        tt_ecole = new JMenuItem("Toute l'école ");
        daterempli = new JMenuItem("Definir les dates de remplissage");

        aPropos = new JMenuItem("Modifier eleve ");
        desactiver_eleve = new JMenuItem("Desactiviver ou renvoyer");
        ajouter_blame_eleve = new JMenuItem("Ajouter blame élève");
        ajout_eleve = new JMenuItem("Ajout élève");

        defpension = new JMenuItem("Définir les prix de la pension");
        estimpension = new JMenuItem("Estimation annuelle des revenus");
        pension.add(defpension);
        pension.add(estimpension);

        jMenu1.add(ajout_entree);
        jMenu1.add(valiser_entree);
        jMenu1.add(consulter_entree);
        jMenu2.add(ajout_sortie);
        jMenu2.add(valider_sortie);
        jMenu2.add(consulter_sortie);

        jMenu3.add(ajout_eleve);
        jMenu3.add(aPropos);
        //jMenu3.add(ajouter_blame_eleve);
        jMenu3.add(desactiver_eleve);
        jMenu3.add(tt_ecole);
        jMenu3.add(tous_eleve);
        jMenu3.add(eleve_insolvable);
        jMenu3.add(consulter_ele_classe);
        jMenu3.add(reac);

        jMenu4.add(modifier_compte);
        reac2.addActionListener((java.awt.event.ActionEvent e) -> {

            Curseur.jtablestartWaitCursor(jInternalFrame2);
            try {
                reactivation_enseignant reactivvation_eleve = new reactivation_enseignant();
                reactivvation_eleve.toutes_absences_eleves();
            } catch (IOException ex) {
                Curseur.jablestopWaitCursor(jInternalFrame2);


            } catch (JSONException ex) {
                Curseur.jablestopWaitCursor(jInternalFrame2);


            }
            Curseur.jablestopWaitCursor(jInternalFrame2);
        });
        reac.addActionListener((java.awt.event.ActionEvent e) -> {

            Curseur.jtablestartWaitCursor(jInternalFrame2);
            try {
                reactivvation_eleve reactivvation_eleve = new reactivvation_eleve();
                reactivvation_eleve.toutes_absences_eleves();
            } catch (IOException ex) {

            } catch (JSONException ex) {

            }
            Curseur.jablestopWaitCursor(jInternalFrame2);
        });
        defpension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {

                try {
                    definition_inscriptions definition_inscriptions = new definition_inscriptions(null, "Descrition des différentes modalités d'inscriptions ", true);
                    definition_inscriptions.showZDialog();
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

        try {
            listeclasse();
        } catch (IOException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }
        aPropos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                memoire_intendance.difference = "modifier";
                setTitle("Modification de l'élève");
                try {
                    liste_eleves();
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                Curseur.jablestopWaitCursor(jInternalFrame2);

            }
        });

        desactiver_eleve.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                memoire_intendance.difference = "desactivation";
                setTitle("Supprimer ou exclure un eleve");

                try {
                    liste_eleves();
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                Curseur.jablestopWaitCursor(jInternalFrame2);

            }
        });

        ajout_eleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                setTitle("Ajouter un eleve");

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                try {
                    ajout_eleve zd = new ajout_eleve(null, "Ajout d'un nouvel Eleve", true);
                    etablissement.Ajouteleveinfo zInfo = zd.showZDialog();
                    JOptionPane jop = new JOptionPane();
                    int option;
                    option = JOptionPane.showConfirmDialog(null, zInfo.toString(), "Informations de l'enseignant ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                    if (option == JOptionPane.OK_OPTION) {
                        //System.out.println("Causes toujours 1");

                        if (!memoire.nom.equals("")) {
                            try {

                                Ajouteleve(memoire.nom, memoire.sexe,
                                        memoire.date_naissance, memoire.classe, memoire.telephone, memoire.lieu_naissance);
                            } catch (IOException ex) {
                                Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    Curseur.jablestopWaitCursor(jInternalFrame2);

                } catch (IOException | JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }

                Curseur.jablestopWaitCursor(jInternalFrame2);
            }
        });

        tt_ecole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                try {

                    user.setText(" Consultation de la liste des élèves par classe");
                    user.setForeground(Color.darkGray);
                    listeecole();
                    setTitle("Consultation de la liste des élèves  ");
                    memoire_intendance.titre = "Consultation de la liste des élèves  ";

                } catch (IOException | JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame2);
            }
        });

        tous_eleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                if (!classe.getSelectedItem().toString().equals("Classes diponibles")) {
                    try {
                        user.setText(" Consultation de la liste des élèves par classe");
                        user.setForeground(Color.darkGray);
                        setTitle("La liste des élèves " + classe.getSelectedItem());
                        memoire_intendance.titre = "Liste des élèves " + classe.getSelectedItem();

                        listeeleveclasse();

                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    user.setText("");

                    Curseur.jablestopWaitCursor(jInternalFrame2);
                } else {
                    JOptionPane.showMessageDialog(null, "Veuillez selectionner la classe en question avant de continuer");

                }
            }
        });

        consulter_ele_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                if (!classe.getSelectedItem().toString().equals("Classes diponibles")) {
                    user.setText(" Consultation de la liste des élèves ");
                    user.setForeground(Color.darkGray);
                    setTitle("Liste des élèves de l'école");
                    try {
                        memoire_intendance.titre = getTitle();

                        listeeleveinsolvableclasse();

                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    user.setText("");

                    Curseur.jablestopWaitCursor(jInternalFrame2);
                } else {
                    JOptionPane.showMessageDialog(null, "Veuillez selectionner la classe en question avant de continuer");

                }
            }
        });

        consulter_ele_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                if (!classe.getSelectedItem().toString().equals("Classes diponibles")) {
                    try {
                        user.setText(" Consultation de la liste des élèves insolvables par classe");
                        user.setForeground(Color.darkGray);
                        setTitle("Liste des élèves insolvables classe");
                        memoire_intendance.titre = "Liste des élèves insolvables " + classe.getSelectedItem();

                        listeeleveinsolvableclasse();

                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    user.setText("");

                    Curseur.jablestopWaitCursor(jInternalFrame2);
                } else {
                    JOptionPane.showMessageDialog(null, "Veuillez selectionner la classe en question avant de continuer");

                }
            }
        });
        eleve_insolvable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";
                setTitle("Liste des élèves insolvables dans toute l'école");
                memoire_intendance.titre = getTitle();

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                try {
                    user.setText("  Liste des élèves insolvables dans toute l'école");
                    user.setForeground(Color.darkGray);
                    listeeleveinsolvableetab();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame2);
            }
        });

        modifier_compte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                user.setText(" Modification du mot de passe ");
                setTitle("Modification du mot de passe");
                memoire_intendance.titre = getTitle();

                JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();

                String mo = JOptionPane.showInputDialog(null, "Veuillez Entrer votre nouveau mot de passe", "Entrer votre nouveau mot de passe", JOptionPane.QUESTION_MESSAGE);
                if (mo == null || (mo != null && ("".equals(mo)))) {
                    JOptionPane.showMessageDialog(null, "votre mot de passe ne doit pas etre null", "ECHEC", JOptionPane.ERROR_MESSAGE);

                } else {
                    String no = JOptionPane.showInputDialog(null, "Veuillez Confirmer le mot de passe !", "Cofirmation mot de passe", JOptionPane.INFORMATION_MESSAGE);
                    if (mo.equals(no)) {
                        JOptionPane.showMessageDialog(null, "Votre compte a été bien modifié", "SUCCES", JOptionPane.INFORMATION_MESSAGE);

                        try {
                            mdofifiermotpasse(mo);
                        } catch (IOException ex) {
                            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (JSONException ex) {
                            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        user.setText("");

                    } else {
                        JOptionPane.showMessageDialog(null, "Mot de passe mal confirmer", "ECHEC", JOptionPane.ERROR_MESSAGE);

                    }
                }
                Curseur.jablestopWaitCursor(jInternalFrame2);

            }
        });
        consulter_entree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame2);
                user.setText(" Consultation de toutes les entrées de fonds");
                user.setForeground(Color.blue);
                setTitle("Consultation de toutes les entrées de fonds");
                memoire_intendance.titre = getTitle();

                try {

                    listedesfondsvalidee();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame2);
            }
        });

        consulter_sortie.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";
                Curseur.jtablestartWaitCursor(jInternalFrame2);
                user.setText("");
                setTitle(" Consultation de toutes les entrées de fonds");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.red);
                try {

                    listedessotiesvalidee();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame2);
            }
        });

        valider_sortie.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "1";
                try {
                    user.setText(" Validation des demandes de sorties disponibles");
                    setTitle("Validation des demandes de sorties disponibles");
                    choixjtabnle = "sortie";
                    memoire_intendance.titre = getTitle();

                    user.setForeground(Color.red);
                    listedessoties();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        valiser_entree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "2";
                Curseur.jtablestartWaitCursor(jInternalFrame2);
                setTitle(" Validation des demandes d'entrées disponibles");
                memoire_intendance.titre = getTitle();

                try {
                    choixjtabnle = "entree";
                    user.setText(" Validation des demandes d'entrées disponibles");
                    user.setForeground(Color.blue);
                    listedesentrees();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame2);
            }
        });
        ajout_entree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                user.setText(" Ajout  d'entrées de fonds");
                Curseur.jtablestartWaitCursor(jInternalFrame2);
                setTitle(" Ajout  d'entrées de fonds");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.blue);
                try {
                    ajout_nouvelle_entree zd = new ajout_nouvelle_entree(null, "Creditation du compte ", true);
                    Ajouteleveinfo zInfo = zd.showZDialog();
                    JOptionPane jop = new JOptionPane();
                    int option;
                    option = showConfirmDialog(null, zInfo.toString(), "le transfert de fonds", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                    if (option == JOptionPane.OK_OPTION) {

                        Ajoutcredit();

                    }
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame2);
            }
        });
        ajout_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                user.setText(" Ajout  de sorties de fonds");
                setTitle(" Ajout  de sorties de fonds");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.red);
                try {
                    ajout_nouvelle_depense zd = new ajout_nouvelle_depense(null, "Ajout d'une nouvelle depense ", true);
                    Ajouteleveinfo zInfo = zd.showZDialog();
                    JOptionPane jop = new JOptionPane();
                    int option;
                    option = showConfirmDialog(null, zInfo.toString(), "veuillez bien confirmer la depense ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                    if (option == JOptionPane.OK_OPTION) {

                        Ajoutdepense();

                    }
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");
                Curseur.jablestopWaitCursor(jInternalFrame2);

            }
        });

// TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated
    public void enregistrer_personnel(String nom, String sexe, String age,
            String cheveux, String taille, String matiere) throws IOException, JSONException {

        String url = memoire.ajouter_personnel_admin;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "nom=" + nom + "&funct=" + sexe + "&cathegorie=" + age + "&telephone="
                + cheveux + "&classe=" + taille + "&matiere=" + matiere + "&heure=" + memoire.coeff;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }

        in.close();
        JOptionPane jop2 = new JOptionPane();

        JOptionPane.showMessageDialog(null, "Operation reussie", "SUCCES", JOptionPane.INFORMATION_MESSAGE);
        ajouter_user zd = new ajouter_user(null, "Ajouter un nouveau personnel administratif", true);
        infoPersonnel_administratif zInfo = zd.showZDialog();

        JOptionPane jop = new JOptionPane();
        int option;
        option = showConfirmDialog(null, zInfo.toString(), "Informations de l'enseignant ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

        if (option == JOptionPane.OK_OPTION) {
            System.out.println("Causes toujours 1");

            try {
                memoire.nom_conserve = memoire.nom;
                memoire.tel_conserve = memoire.telephone;
                if (!memoire.nom.equals("")) {

                    enregistrer_personnel(memoire.nom, memoire.sexe,
                            memoire.cathegorie, memoire.telephone, memoire.classe, memoire.matiere);
                }
            } catch (IOException ex) {

            }
        }

        System.out.println(response);
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void liste_eleves() throws IOException, JSONException {
        Curseur.startWaitCursor(this);

        String url = memoire.liste_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        StringBuilder sb = new StringBuilder();
        URL urln = new URL(memoire.liste_classe);
        HttpURLConnection conn = (HttpURLConnection) urln.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        int responsecode = conn.getResponseCode();
        if (responsecode != 200) {
            throw new RuntimeException("HttpResponseCode: " + responsecode);
        } else {
            Scanner sc = new Scanner(urln.openStream());

            while (sc.hasNext()) {
                inline = sc.nextLine().trim();
            }

            org.json.JSONObject bj = new JSONObject(inline);
            org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
            String address = jsonArray.getJSONObject(0).getString("nom_classe");

            List<liste_classe> liste_classe = new ArrayList<liste_classe>();
            clas = new String[jsonArray.length()];

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject eleve = jsonArray.getJSONObject(i);

                String nom_eleve = eleve.getString("nom_classe");
                //  classe.addItem(nom_eleve);

                clas[i] = nom_eleve;

            }
            JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();
            String nom = (String) JOptionPane.showInputDialog(null,
                    "Veuillez selectionner sa classe!",
                    "Supprimer,  Modifier ou renvoyer un eleve !",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    clas,
                    clas.length);
            int option;
            option = showConfirmDialog(null, "Salle : " + nom, " Confirmez vous la salle ?",
                     JOptionPane.INFORMATION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {

                listeeleveparclasse1(nom);

            }
            sc.close();

        }

        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    public void desactivationeleves(String nom, String desactiveur) throws IOException {

        Curseur.startWaitCursor(this);

        String url = memoire_intendance.desactivation_eleve;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        //con.setRequestProperty("User-Agent", USER_AGENT);
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
//
//         String nom =   detail.getUsername();
//         String note = detail.getclasse();
//         String pass = detail.getnote();

        String urlParameters = "nom=" + nom + "&desactiveur=" + desactiveur;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);

        }

        in.close();

        System.out.println(response);

        JOptionPane.showMessageDialog(null, "Operation reussie ", "SUCCES", JOptionPane.INFORMATION_MESSAGE);
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void listeeleveparclasse1(String classe_choisie) throws IOException, JSONException {

        Curseur.startWaitCursor(this);

        String url = memoire.liste_eleve_par_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        //con.setRequestProperty("User-Agent", USER_AGENT);
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + classe_choisie;

        // Send post request
        try {
            con.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
            wr.writeBytes(urlParameters);

            wr.flush();
            wr.close();
            int responseCode = con.getResponseCode();
        } catch (IOException ex) {
            int option = showConfirmDialog(null, "Impossible d'obtenir la liste des eleves de cette classe", "Erreur survenue",
                    JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
        }
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
        String address = jsonArray.getJSONObject(0).getString("nom");
        List<liste_classe> liste_classe = new ArrayList<liste_classe>();
        clas = new String[jsonArray.length()];
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject eleve = jsonArray.getJSONObject(i);

            String nom_eleve = eleve.getString("nom");
            String id_eleve = eleve.getString("id_eleve");
            if (memoire.difference.equals("modifier")) {
                clas[i] = nom_eleve + " ;  " + id_eleve;
            } else {
                clas[i] = nom_eleve;

            }

        }
        JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();
        String nom = (String) JOptionPane.showInputDialog(null,
                "Veuillez selectionner l'eleve !",
                "Enregistrer un blame  !",
                JOptionPane.QUESTION_MESSAGE,
                null,
                clas,
                clas.length);
        int option;
        memoire_intendance.nom_conserve = nom;

        option = showConfirmDialog(null, "Vos avez opter pour l'eleve " + nom, "",
                 JOptionPane.INFORMATION_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {

            if (!memoire_intendance.difference.equals("modifier")) {
                memoire_intendance.tel_conserve = nom;
                desactivationeleves(nom, memoire_intendance.nom_user);

            } else {

                ajout_eleve zd = new ajout_eleve(null, "Modification", true);
                etablissement.Ajouteleveinfo zInfo = zd.showZDialog();
                JOptionPane jopt = new JOptionPane();
                int optiont;
                optiont = showConfirmDialog(null, zInfo.toString(), "Informations de l'eleve ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                if (optiont == JOptionPane.OK_OPTION) {
                    System.out.println("Causes toujours 1");

                    if (!memoire_intendance.nom.equals("")) {
                        try {
                            modifierelevess(nom, memoire_intendance.nom, memoire_intendance.sexe,
                                    memoire_intendance.date_naissance, memoire_intendance.classe, memoire_intendance.telephone, memoire_intendance.lieu_naissance);
                        } catch (IOException ex) {
                            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

            }

        }
        List<String> liste_class = new ArrayList<String>();
        for (final liste_classe detail : liste_classe) {
            liste_class.add(detail.getliste_class());
        }
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    public void modifierelevess(String nom1, String nom, String sexe, String age,
            String cheveux, String taille, String matiere) throws IOException {

        Curseur.startWaitCursor(this);

        String url = memoire_intendance.modifier_eleve;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
//		con.setRequestProperty("User-Agent", USER_AGENT);
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
//
//         String nom =   detail.getUsername();
//         String note = detail.getclasse();
//         String pass = detail.getnote();

        String urlParameters = "nom=" + nom1 + "&nom1=" + nom + "&sexe=" + sexe + "&date=" + age + "&telephone="
                + taille + "&classe=" + cheveux + "&lieu=" + matiere + "&createur=" + memoire_intendance.id_user;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }

        in.close();

        System.out.println(response);
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    public void Ajouteleve(String nom, String sexe, String age,
            String cheveux, String taille, String matiere) throws IOException, JSONException {

        String url = memoire.ajouter_eleve;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        //con.setRequestProperty("User-Agent", USER_AGENT);
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
//
//         String nom =   detail.getUsername();
//         String note = detail.getclasse();
//         String pass = detail.getnote();

        String urlParameters = "nom=" + nom + "&sexe=" + sexe + "&date=" + age + "&telephone="
                + taille + "&classe=" + cheveux + "&lieu=" + matiere + "&createur=" + memoire.id_user + "&pere=" + memoire.pere + "&mere=" + memoire.mere;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        if (!test.equals("0")) {

            JOptionPane jop2 = new JOptionPane();
            JOptionPane.showMessageDialog(null, "Operation reussie", "SUCCES", JOptionPane.INFORMATION_MESSAGE);

            ajout_eleve zd = null;
            try {
                zd = new ajout_eleve(null, "Ajout d'un nouvel Eleve", true);
            } catch (JSONException ex) {
                Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
            }
            etablissement.Ajouteleveinfo zInfo = zd.showZDialog();
            JOptionPane jop = new JOptionPane();
            int option;
            option = showConfirmDialog(null, zInfo.toString(), "Informations de l'eleve ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {
                //System.out.println("Causes toujours 1");

                if (!memoire_intendance.nom.equals("")) {
                    try {
                        memoire_intendance.nom_conserve = memoire_intendance.nom;

                        Ajouteleve(memoire_intendance.nom, memoire_intendance.sexe,
                                memoire_intendance.date_naissance, memoire_intendance.classe, memoire_intendance.telephone, memoire_intendance.lieu_naissance);
                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        } else {
            memoire_intendance.nom_conserve = memoire_intendance.nom;
            memoire_intendance.tel_conserve = memoire_intendance.lieu_naissance;

            JOptionPane jop2 = new JOptionPane();
            JOptionPane.showMessageDialog(null, "Erreur,cet élève existe déjà", " Message d'Erreur!", JOptionPane.ERROR_MESSAGE);

            ajout_eleve zd = null;
            try {
                zd = new ajout_eleve(null, "Ajout d'un nouvel Eleve", true);
            } catch (JSONException ex) {
                Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
            }
            etablissement.Ajouteleveinfo zInfo = zd.showZDialog();
            JOptionPane jop = new JOptionPane();
            int option;
            option = JOptionPane.showConfirmDialog(null, zInfo.toString(), "Informations de l'eleve ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {
                System.out.println("Causes toujours 1");

                if (!memoire_intendance.nom.equals("")) {
                    try {
                        //memoire.nom_conserve=memoire_intendance.nom;
                        Ajouteleve(memoire_intendance.nom, memoire_intendance.sexe,
                                memoire_intendance.date_naissance, memoire_intendance.classe, memoire_intendance.telephone, memoire_intendance.lieu_naissance);
                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        }
        in.close();

        System.out.println(response);

        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    public void Validation(String id) throws IOException, JSONException {

        String url = memoire_intendance.valider_fonds_ou_depense;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "id_budget=" + id;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        in.close();

    }

    public void mdofifiermotpasse(String id) throws IOException, JSONException {

        PasswordAuthentication f = new PasswordAuthentication();

        String pass = f.hash(id);
        System.out.println("MOT de passe hashe : " + pass);

        String url = memoire_intendance.modifier_mot_passe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "password=" + pass + "&id_user=" + "4";

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    public void Ajoutdepense() throws IOException, JSONException {

        String url = memoire_intendance.Ajout_depense;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "montant=" + memoire_intendance.prix + "&periode=" + memoire_intendance.periode + "&description=" + memoire_intendance.desciption
                + "&but=" + memoire_intendance.but + "&createur=" + memoire_intendance.id_user;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        JOptionPane.showMessageDialog(null, "Votre demande pour la sortie des fonds a été enregistré avec succès");
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    public void Ajoutperioderemplissage() throws IOException, JSONException {

        String url = memoire.definition_periodes;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "debut=" + memoire.nom + "&fin=" + memoire.sexe + "&periode=" + memoire.classe
                + "&action=" + action;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        org.json.JSONObject bj = new JSONObject(test);
        org.json.JSONObject jsonArray = bj.getJSONObject("error_msg");
        String message = jsonArray.getString("error");
        if ("1".equals(message)) {
            JOptionPane.showMessageDialog(null, "Periode de remplissage bien effectue pour le compte de la " + memoire.classe);

        } else {
            int option = JOptionPane.showConfirmDialog(null, "Duplicata pour la " + memoire.classe + "\nSohaitez vous remplacer les donnees precedement enregistrees pour cette sequence", "Duplicata de donnees ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            if (option == JOptionPane.OK_OPTION) {
                action = "modifier";
                Ajoutperioderemplissage();
            }
        }
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    public void Ajoutcredit() throws IOException, JSONException {

        String url = memoire_intendance.Ajout_fonds;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "montant=" + memoire_intendance.prix + "&periode=" + memoire_intendance.periode + "&description=" + memoire_intendance.desciption
                + "&but=" + memoire_intendance.but + "&createur=" + memoire_intendance.id_user;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        JOptionPane.showMessageDialog(null, "Votre demande pour la créditation du compte\n a été enregistré avec succès");
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void listedesentrees() throws IOException, JSONException {
        jTable1.enable(true);
        String url = memoire_intendance.liste_fonds_en_attente;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_entree");
            String periode = s11.getString("periode");

            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM ( Concerné)", "Montant demandé", "description", "but", "date de depot", "periode", "Cliquez pour valider la demande"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.id());
            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.date());
            row.add(detail.periode());
            row.add("CONFIRMER ?");

            model.addRow(row);
        }

        jTable1.setModel(model);

    }

    private void listedessoties() throws IOException, JSONException {
        jTable1.enable(true);
        String url = memoire_intendance.liste_depenses_en_attente;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }
        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_entree");
            String periode = s11.getString("periode");
            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM ( Concerné)", "Montant demandé", "description", "but", "date de depot", "periode", "Cliquez pour valider la demande"};
        model1 = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.id());
            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.date());
            row.add(detail.periode());
            row.add("CONFIRMER ?");

            model1.addRow(row);
        }

        jTable1.setModel(model1);

    }

    private void listedessotiesvalidee() throws IOException, JSONException {
        jTable1.enable(false);
        String url = memoire_intendance.liste_depenses_validee;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);

        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }
        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_validation");
            String periode = s11.getString("periode");

            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;

        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM ( Concerné)", "Montant demandé", "description", "but", "date de validation", "periode", ""};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.id());
            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.date());
            row.add(detail.periode());
            row.add("DEJA VALIDE");

            model.addRow(row);
        }

        jTable1.setModel(model);

        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void listedesfondsvalidee() throws IOException, JSONException {
        jTable1.enable(false);
        String url = memoire_intendance.liste_fonds_validees;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();
        effectif.setText("Effectif total : " + jsonArray.length());

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_validation");
            String periode = s11.getString("periode");

            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;

        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM ( Concerné)", "Montant demandé", "description", "but", "date de validation", "periode", "Cliquez pour valider la demande"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.id());
            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.date());
            row.add(detail.periode());
            row.add("DEJA VALIDE");

            model.addRow(row);
        }

        jTable1.setModel(model);
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void listeclasse() throws IOException, JSONException {

        jTable1.enable(false);
        String url = memoire.liste_classe;
        String inline = null;
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        StringBuilder sb = new StringBuilder();
        URL urln = new URL(memoire.liste_classe);
        HttpURLConnection conn = (HttpURLConnection) urln.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        int responsecode = conn.getResponseCode();
        if (responsecode != 200) {
            throw new RuntimeException("HttpResponseCode: " + responsecode);
        } else {
            Scanner sc = new Scanner(urln.openStream());

            while (sc.hasNext()) {
                inline = sc.nextLine().trim();
            }
            System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            try {
                jsonArray = bj.getJSONArray("victoire");

            } catch (JSONException ex) {
                JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
            }
            String address = jsonArray.getJSONObject(0).getString("nom_classe");

            classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Classes diponibles"}));

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject eleve = jsonArray.getJSONObject(i);
                String nom_eleve = eleve.getString("nom_classe");
                classe.addItem(nom_eleve);

                System.out.println("NOM DES ELEVES  " + nom_eleve);

                sc.close();
            }
        }
        Curseur.stopWaitCursor(this);

    }

    private void listeecole() throws IOException, JSONException {
        jTable1.enable(false);
        String url = memoire.liste_eleves_etab;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        String inputLine, inline = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }
        System.out.println(inline);

        org.json.JSONObject bj = new JSONObject(inline);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        paye = 0;
        part1 = 0;
        part2 = 0;
        imp = 0;
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("nom_classe");
            String note2_eleve = s11.getString("etat_frais");
            String montant = s11.getString("amount");
            String sexe = s11.getString("sexe");
            String periode = s11.getString("nom_classe");
            switch (note2_eleve) {
                case "impaye":
                    imp = imp + 1;
                    break;
                default:
                    part2++;

                    break;

            }
            part1 += Integer.parseInt(montant);

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, periode));

        }
        //part1=jsonArray.length()*;
        in.close();
        // recap.setText("élèves payés : "+paye+"\n élèves impayés :"+imp+"\n uniquement APE : "+part1+"\n élèves payés APE + frais exi. :"+part2);
        effectif.setText("Effectif ecole:" + jsonArray.length() + "   Elèves ayant  payé== " + part2 + "\n ; Elèves impayés == " + imp + ";  Montant deja verse==" + part1);
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "classe", "sexe", "Etat des frais", "Classe "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());
            row.add(" " + detail.date());

            model.addRow(row);
        }

        jTable1.setModel(model);

        in.close();
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void listeeleveclasse() throws IOException, JSONException {

        String url = memoire.liste_eleves_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + classe.getSelectedItem();

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }
        System.out.println(inline);

        org.json.JSONObject bj = new JSONObject(inline);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        paye = 0;
        part1 = 0;
        part2 = 0;
        imp = 0;
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("lieu_naissance");
            String note2_eleve = s11.getString("etat_frais");
            String sexe = s11.getString("sexe");
            String montant = s11.getString("amount");
            String periode = s11.getString("nom_classe");
            switch (note2_eleve) {
                case "impaye":
                    imp = imp + 1;
                    break;
                default:
                    part2++;

                    break;

            }
            part1 += Integer.parseInt(montant);
            paye = jsonArray.length() * memoire_intendance.reste;

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, periode));

        }
        in.close();
        // recap.setText("élèves payés : "+paye+"\n élèves impayés :"+imp+"\n uniquement APE : "+part1+"\n élèves payés APE + frais exi. :"+part2);
        effectif.setText("Effectif total classe : " + jsonArray.length() + " /Montant elèves ayant  payé=" + part1 + "FCFA /Montant attendu=" + paye + "FCFA /Nombre eleves Impayes=" + imp + " /Nombre eleves ayant paye=" + part2);
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "lieu", "sexe", "Etat des frais", "date de depot", "  "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());
            row.add(" " + detail.date());

            model.addRow(row);
        }

        jTable1.setModel(model);

        in.close();
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void listeeleveinsolvableclasse() throws IOException, JSONException {
        String url = memoire.liste_elve_insolvable_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + classe.getSelectedItem();

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }
        System.out.println(inline);

        org.json.JSONObject bj = new JSONObject(inline);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("nom_classe");
            String note2_eleve = s11.getString("etat_frais");
            String sexe = s11.getString("sexe");
            String periode = s11.getString("date_paiement");

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, periode));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length());
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "classe", "sexe", "Etat des frais", "date Inscription", "  "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());
            row.add(" " + detail.date());

            model.addRow(row);
        }

        jTable1.setModel(model);

        in.close();
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    private void listeeleveinsolvableetab() throws IOException, JSONException {
        String url = memoire.liste_eleve_insolvables;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        String inputLine, inline = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }
        System.out.println(inline);

        org.json.JSONObject bj = new JSONObject(inline);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("nom_classe");
            String note2_eleve = s11.getString("etat_frais");
            String sexe = s11.getString("sexe");
            String periode = s11.getString("date_paiement");

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, periode));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length());
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "classe", "sexe", "Etat des frais", "date inscription", "  "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());
            row.add(" " + detail.date());

            model.addRow(row);
        }

        jTable1.setModel(model);

        in.close();
        Curseur.jablestopWaitCursor(jInternalFrame2);

    }

    class PrintTable extends JPanel implements Printable {

        public PrintTable() {
            this.setLayout(new BorderLayout());
            JLabel title = new JLabel("title");
            title.setBounds(295, 5, 300, 5);
            this.add(title);

            PrinterJob pj = PrinterJob.getPrinterJob();
            pj.setPrintable(PrintTable.this);
            pj.printDialog();
            try {
                pj.print();
            } catch (Exception PrintException) {
            }

        }

        public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.black);
            int fontHeight = g2.getFontMetrics().getHeight();
            int fontDescent = g2.getFontMetrics().getDescent();

            // reserve spaces for page number
            double pageHeight = pageFormat.getImageableHeight() - fontHeight;
            double pageWidth = pageFormat.getImageableWidth();
            double tableWidth = jTable1.getColumnModel().getTotalColumnWidth();
            double scale = 10;
            if (tableWidth >= pageWidth) {
                scale = pageWidth / tableWidth;
            }
            double headerHeightOnPage = jTable1.getTableHeader().getHeight() * scale;
            double tableWidthOnPage = tableWidth * scale;
            double oneRowHeight = (jTable1.getRowHeight() + jTable1.getRowMargin()) * scale + 2;
            int numRowsOnAPage = (int) ((pageHeight - headerHeightOnPage) / oneRowHeight);
            double pageHeightForTable = oneRowHeight * numRowsOnAPage;
            int totalNumPages = (int) Math.ceil(((double) jTable1.getRowCount()) / numRowsOnAPage);
            if (pageIndex >= totalNumPages) {
                return NO_SUCH_PAGE;
            }

            g2.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

            g2.drawString(memoire_intendance.titre
                    + "   " + "Page: " + (pageIndex + 1), (int) pageWidth / 2 - 80, (int) (pageHeight + fontHeight - fontDescent));
            g2.translate(0f, headerHeightOnPage);
            g2.translate(0f, -pageIndex * pageHeightForTable);
            if (pageIndex + 1 == totalNumPages) {
                int lastRowPrinted = numRowsOnAPage * pageIndex;
                int numRowsLeft = jTable1.getRowCount() - lastRowPrinted;
                g2.setClip(0, (int) (pageHeightForTable * pageIndex), (int) Math.ceil(tableWidthOnPage), (int) Math.ceil(oneRowHeight * numRowsLeft));
            } else {
                g2.setClip(0, (int) (pageHeightForTable * pageIndex), (int) Math.ceil(tableWidthOnPage), (int) Math.ceil(pageHeightForTable));
            }
            g2.scale(scale, scale);
            jTable1.paint(g2);
            g2.scale(1 / scale, 1 / scale);
            g2.translate(1f, pageIndex * pageHeightForTable);
            g2.translate(1f, -headerHeightOnPage);
            g2.setClip(0, 0, (int) Math.ceil(tableWidthOnPage), (int) Math.ceil(headerHeightOnPage));
            g2.scale(scale, scale);
            jTable1.getTableHeader().paint(g2);
            return Printable.PAGE_EXISTS;
        }

    }

    private void solde() throws IOException, JSONException {
        String url = memoire_intendance.solde;
        String inline = null;
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        StringBuilder sb = new StringBuilder();
        URL urln = new URL(memoire_intendance.solde);
        HttpURLConnection conn = (HttpURLConnection) urln.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        int responsecode = conn.getResponseCode();
        if (responsecode != 200) {
            throw new RuntimeException("HttpResponseCode: " + responsecode);
        } else {
            Scanner sc = new Scanner(urln.openStream());

            while (sc.hasNext()) {
                inline = sc.nextLine().trim();
            }
            System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            org.json.JSONObject eleve = bj.getJSONObject("victoire");

            String principale = null, entree = null, sortie = null;
            principale = eleve.getString("solde_principal");
            entree = eleve.getString("solde_entree");
            sortie = eleve.getString("solde_sortie");

            sc.close();

            JOptionPane.showMessageDialog(null, "LE SOLDE DE VOTRE ETABLISSEMENT  :" + "\n\n"
                    + "Solde entree : " + principale + " FCFA\n"
                    + "Solde sortie : " + sortie + " FCFA\n"
                    + "Solde principal : " + principale + " FCFA");

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProviseurEcole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ProviseurEcole().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> classe;
    private javax.swing.JButton deconnexion;
    private javax.swing.JLabel effectif;
    private javax.swing.JButton impression;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenu pension;
    private javax.swing.JMenu personnel;
    private javax.swing.JMenu remplissage;
    private javax.swing.JMenu solde;
    private javax.swing.JLabel user;
    // End of variables declaration//GEN-END:variables
}
