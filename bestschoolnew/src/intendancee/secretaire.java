/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intendancee;


import etablissement.Curseur;
import etablissement.connexion;
import etablissement.memoire;
import etablissement.memoire1;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showConfirmDialog;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;
import static javax.swing.JOptionPane.showConfirmDialog;

/**
 *
 * @author Michelle Wafo
 */
public class secretaire extends javax.swing.JFrame {
       JMenuItem inscription,modifier_compte,consulter_ele_classe,ajout_sortie,ajout_entree,confirmer_sortie,confirmer_entree,consulter_sortie_confirmee,consulter_entree_confirmee,eleve_insolvable,tous_eleve;
    /**
     * Creates new form secretaire
     */
      String titre;
        String urObjctInCell=null,soldes=null,copmt=null,objet=null;
                int x=0,total=0;
       org.json.JSONArray jsonArray;

    public secretaire() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        user = new javax.swing.JLabel();
        classe = new javax.swing.JComboBox<>();
        effectif = new javax.swing.JLabel();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        impression = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));
        setIconImage(new ImageIcon(memoire.setup).getImage());
        setName("secre"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 51, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Deconnexion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));

        effectif.setFont(new java.awt.Font("Segoe Print", 2, 14)); // NOI18N

        jInternalFrame2.setVisible(true);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(32);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
        );

        impression.setText("Imprimer");
        impression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impressionActionPerformed(evt);
            }
        });

        jMenu1.setText("Gestion eleves  et classes  ");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("service     ");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Gestion de compte");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(user)
                        .addGap(33, 33, 33)
                        .addComponent(classe, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 452, Short.MAX_VALUE)
                        .addComponent(effectif)
                        .addGap(29, 29, 29)
                        .addComponent(impression)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jButton1))
            .addComponent(jInternalFrame2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(effectif)
                            .addComponent(impression))
                        .addComponent(user))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInternalFrame2))
        );

        getAccessibleContext().setAccessibleName("secre");
        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
this.setLocationRelativeTo(null);

                      setTitle(" Bienvenue à  vous  <<     M. " +memoire.nom_user +"     >> dans votre espace de travail ");

            user.setFont(new java.awt.Font("Segoe Print", 2, 12)); // NOI18N
            
            user.setText("Bienvenue à vous mdme : "+memoire_intendance.nom_user);
              setTitle("Bienvenue à vous mdme : "+memoire_intendance.nom_user);
           memoire_intendance.titre= getTitle();
           
            
 try {
               liste_classe();
           } catch (IOException ex) {
               Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
           } catch (JSONException ex) {
               Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
           }

modifier_compte= new  JMenuItem("Modifier mot de passe");
              setTitle("Modifier mot de passe");

                jMenu3.add(modifier_compte);
                
                eleve_insolvable= new  JMenuItem("Tous les élèves insolvables");
                inscription= new  JMenuItem("Inscrire un nouvel élève");
                tous_eleve= new  JMenuItem("Elèves par classe");
                consulter_ele_classe= new  JMenuItem("élèves insolvables par classe");
                
                jMenu1.add(inscription);
                jMenu1.add(tous_eleve);
                jMenu1.add(eleve_insolvable);
                jMenu1.add(consulter_ele_classe);
                
             
                  tous_eleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                       memoire1.click="";

if(!classe.getSelectedItem().toString().equals("Classes diponibles"))
{             try {
     user.setText("ERREUR SURVENUE");
                   setTitle("ERREUR SURVENUE");
           memoire_intendance.titre= getTitle();

            user.setForeground(Color.red);                 
          liste_eleve_classe();                           
                    
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
        user.setText("");

   }else{
            JOptionPane.showMessageDialog(null,"Veuillez selectionner la classe en question avant de continuer");

           }}});
    
                
    consulter_ele_classe .addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                       memoire1.click="";

      Curseur.jtablestartWaitCursor(jInternalFrame2);
if(!classe.getSelectedItem().toString().equals("Classes diponibles"))
{
    user.setText("Liste des  élèves insolvables dans la classe de : "+classe.getSelectedItem().toString());
            user.setForeground(Color.darkGray);
                               setTitle("Liste des  élèves insolvables dans la classe de : "+classe.getSelectedItem().toString());
           memoire_intendance.titre= getTitle();

                try {
                      
          liste_eleve_insolvable_classe();                           
                    
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                        user.setText("");

      Curseur.jablestopWaitCursor(jInternalFrame2); 
}else{
            JOptionPane.showMessageDialog(null,"Veuillez selectionner la classe en question avant de continuer");

           }   }});
    
    consulter_ele_classe.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
              memoire1.click="";

      Curseur.jtablestartWaitCursor(jInternalFrame2);
if(!classe.getSelectedItem().toString().equals("Classes diponibles"))
{user.setText("Liste des  élèves insolvables dans la classe de : "+classe.getSelectedItem().toString());
            user.setForeground(Color.darkGray);
            setTitle("Liste des  élèves insolvables dans la classe de : "+classe.getSelectedItem().toString());
                 memoire_intendance.titre= getTitle();

           try {                    
                    liste_eleve_insolvable_classe();                           
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                        user.setText("");

      Curseur.jablestopWaitCursor(jInternalFrame2); 
  }else{
            JOptionPane.showMessageDialog(null,"Veuillez selectionner la classe en question avant de continuer");

           } }});
    eleve_insolvable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
       memoire1.click="";
       
      Curseur.jtablestartWaitCursor(jInternalFrame2);
          user.setText("Liste des  élèves insolvables dans l'établissement");
            user.setForeground(Color.darkGray);
                        setTitle("Liste des  élèves insolvables dans l'établissement");

                try {
                        memoire_intendance.titre= getTitle();
         
          liste_eleve_insolvable_etab();                           
                    
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                        user.setText("");

      Curseur.jablestopWaitCursor(jInternalFrame2); 
   }    });
                
 
                
                inscription.addActionListener(new java.awt.event.ActionListener() {
     public void actionPerformed(java.awt.event.ActionEvent e) {
                             List<Infoinscription_eleve> enseign = new ArrayList<Infoinscription_eleve>(); 
           user.setText("Inscription d'un  nouvel élève et frais exigibles ");
            user.setForeground(Color.darkGray);
        setTitle("Inscription d'un  nouvel élève et frais exigibles ");

                inscription_eleve zd = null;
                try {
                    zd = new inscription_eleve(null, "Inscription d'un nouvel élève", true);
                } catch (JSONException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                }
                            Infoinscription_eleve zInfo = zd.showZDialog();
                     JOptionPane jop = new JOptionPane();
                 int option;
                option = showConfirmDialog(null, zInfo.toString(), "Informations de l'inscription en cours ",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
                
                   if(option == JOptionPane.OK_OPTION)
                   {
                                 
                                      try {                               
                               if(!memoire_intendance.nom.equals("")) {      

                                          inscription_eleve();
                               }  } catch (JSONException ex) {
                                          Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                                      } catch (IOException ex) {
                                     Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                                 }
                                 
                   } 
                           user.setText("");

        }});

       
                
                
 modifier_compte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
        user.setText(" Modification du mot de passe ");
        setTitle(" Modification du mot de passe ");

                JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();
            
              String mo = JOptionPane.showInputDialog(null, "Veuillez Entrer votre nouveau mot de passe", "Entrer votre nouveau mot de passe", JOptionPane.QUESTION_MESSAGE);
           if(mo == null || (mo != null && ("".equals(mo))))   
           {
                JOptionPane.showMessageDialog(null, "votre mot de passe ne doit pas etre null","ECHEC",JOptionPane.ERROR_MESSAGE);
  
           } else { 
                  String no = JOptionPane.showInputDialog(null, "Veuillez Confirmer le mot de passe !", "Cofirmation mot de passe", JOptionPane.INFORMATION_MESSAGE);
               if (mo.equals(no)){
                   JOptionPane.showMessageDialog(null, "Votre compte a été bien modifié","SUCCES",JOptionPane.INFORMATION_MESSAGE);
                   
                      try {
                          mdofifier_mot_passe(mo);
                      } catch (IOException ex) {
                          Logger.getLogger(secretaire.class.getName()).log(Level.SEVERE, null, ex);
                      } catch (JSONException ex) {
                          Logger.getLogger(secretaire.class.getName()).log(Level.SEVERE, null, ex);
                      }
                              user.setText("");

               }else{
                   JOptionPane.showMessageDialog(null, "Mot de passe mal confirmé","ECHEC",JOptionPane.ERROR_MESSAGE);
                   
               }
           }

   }    });
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

      public void inscription_eleve() throws IOException, JSONException{
         


    
          String url = memoire.inscription_eleve;

        URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		con.setRequestMethod("POST");
		con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        
String urlParameters = "montant="+memoire_intendance.prix+"&nom="+memoire_intendance.nom+"&classe="+memoire_intendance.classe+
        "&but="+memoire_intendance.but+"&id_user="+memoire_intendance.id_user+"&paie="+memoire_intendance.cateristiques_paie;
		
               con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(urlParameters);
		wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Post parameters : " + urlParameters);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		 
         		System.out.println(urlParameters);


		String inputLine,test = null;
		StringBuffer response = new StringBuffer();
    while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        test = inputLine.trim();

        System.out.println(inputLine);
 
    }  JOptionPane jo = new JOptionPane();
                 int op;
                op = showConfirmDialog(null,"Eleve inscrit avec succes !\nSouhaitez vous imprimer le reçu ?", "Impression du reçu ",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
                
                   if(op == JOptionPane.OK_OPTION)
                   {
                       new impression_recus();
                   }
        //
        user.setText("Inscription d'un  nouvel élève et frais exigibles ");
            user.setForeground(Color.darkGray);
                inscription_eleve zd = null;
                try {
                    zd = new inscription_eleve(null, "Inscription d'un nouvel élève", true);
                } catch (JSONException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                }
                            Infoinscription_eleve zInfo = zd.showZDialog();
                     JOptionPane jop = new JOptionPane();
                 int option;
                option = showConfirmDialog(null, zInfo.toString(), "Informations de l'inscription en cours ",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
                
                   if(option == JOptionPane.OK_OPTION)
                   {
                                 
                                      try {                               
                               if(!memoire_intendance.nom.equals("")) {      

                                          inscription_eleve();
                               }  } catch (JSONException ex) {
                                          Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                                      } catch (IOException ex) {
                                     Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                                 }
                                 
                   } 
                           user.setText("");

        

}
    
    
    public void mdofifier_mot_passe(String id) throws IOException, JSONException{
         

        PasswordAuthentication f= new PasswordAuthentication();

       String pass = f.hash(id);
    		System.out.println("MOT de passe hashe : " + pass);
   
          String url = memoire_intendance.modifier_mot_passe;

        URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		con.setRequestMethod("POST");
		con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        
              String urlParameters = "password="+pass+"&id_user="+"4";
		
               con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(urlParameters);
		wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Post parameters : " + urlParameters);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		 
         		System.out.println(urlParameters);


		String inputLine,test = null;
		StringBuffer response = new StringBuffer();
    while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        test = inputLine.trim();

        System.out.println(inputLine);
 
    }

}

private void liste_eleve_classe() throws IOException, JSONException{
			String url = memoire.liste_eleve_par_classe;

             URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		con.setRequestMethod("POST");
		con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
               

        
              String urlParameters = "classe="+classe.getSelectedItem();
		
		
		// Send post request
		con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(urlParameters);
		wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Post parameters : " + urlParameters);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		 
         		System.out.println(urlParameters);

    		String inputLine,inline = null;

		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
		 response.append(inputLine.trim());
                    inline = inputLine.trim();
		System.out.println("Response Code : " + response.append(inputLine));

		}
                		System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            try {
                                jsonArray = bj.getJSONArray("victoire");
                   
                } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null,"DESOLE , Il n'existe aucun élèment portant sur votre recherche");
                }

             List<model_eleves> liste_eleve = new ArrayList<model_eleves>(); 


                for(int i=0; i<jsonArray.length(); i++){
                        JSONObject s11 = jsonArray.getJSONObject(i);

                         String code = s11.getString("id_eleve");

                         String nom_eleve = s11.getString("nom");
                         String classew = s11.getString("date_naissance");
                         String note1_eleve = s11.getString("lieu_naissance");
                         String note2_eleve = s11.getString("etat_frais");
                         String sexe=s11.getString("sexe");
                         String periode = s11.getString("date_paiement");
                         
                       
                         liste_eleve.add(new model_eleves( code,nom_eleve,classew,note1_eleve,sexe,note2_eleve,periode));

                            }
     in.close();
                                  effectif.setText("Effectif total : "+ jsonArray.length());
                        total=0;
                            final  JInternalFrame jInternalFrame1;
                               jInternalFrame1 = new JInternalFrame("Internal Frame "  ,  true, true, true, true);

                              //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
                               String[] columnNames = {"    CODE      ","        NOM et prenoms élève      ","       date naissance    ","   lieu   " , "    sexe  ", "     Etat des frais     ", "      date de depot     ","  "};
                                    DefaultTableModel model = new DefaultTableModel(columnNames, 0);

                         for( final model_eleves detail : liste_eleve) 
                           {
                            Vector<String> row = new Vector<>();
                            row.add(" "+detail.id());
                            row.add(" "+detail.getUsername());
                            row.add(" "+detail.getclasse());
                            row.add(" "+detail.getnote());
                            row.add(" "+detail.getnote2());
                            row.add(" "+detail.periode());
                            row.add(" "+detail.date());

                             model.addRow( row );
                            }

            jTable1.setModel(model);

         in.close();

} 
private void liste_eleve_insolvable_classe() throws IOException, JSONException{
			String url = memoire.liste_elve_insolvable_classe;

             URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		con.setRequestMethod("POST");
		con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
               

        
              String urlParameters = "classe="+classe.getSelectedItem();
		
		
		// Send post request
		con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(urlParameters);
		wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Post parameters : " + urlParameters);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		 
         		System.out.println(urlParameters);

    		String inputLine,inline = null;

		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
		 response.append(inputLine.trim());
                    inline = inputLine.trim();
		System.out.println("Response Code : " + response.append(inputLine));

		}
                		System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            try {
                                jsonArray = bj.getJSONArray("victoire");
                   
                } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null,"DESOLE , Il n'existe aucun élèment portant sur votre recherche");
                }

             List<model_eleves> liste_eleve = new ArrayList<model_eleves>(); 


                for(int i=0; i<jsonArray.length(); i++){
                        JSONObject s11 = jsonArray.getJSONObject(i);

                         String code = s11.getString("id_eleve");

                         String nom_eleve = s11.getString("nom");
                         String classew = s11.getString("date_naissance");
                         String note1_eleve = s11.getString("lieu_naissance");
                         String note2_eleve = s11.getString("etat_frais");
                         String sexe=s11.getString("sexe");
                         String periode = s11.getString("date_paiement");
                         
                       
                         liste_eleve.add(new model_eleves( code,nom_eleve,classew,note1_eleve,sexe,note2_eleve,periode));

                            }
     in.close();
                                  effectif.setText("Effectif total : "+ jsonArray.length());
                        total=0;
                            final  JInternalFrame jInternalFrame1;
                               jInternalFrame1 = new JInternalFrame("Internal Frame "  ,  true, true, true, true);

                              //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
                               String[] columnNames = {"CODE","NOM et prenoms élève","date naissance","lieu" , "sexe", "Etat des frais", "date Inscription","  "};
                                    DefaultTableModel model = new DefaultTableModel(columnNames, 0);

                         for( final model_eleves detail : liste_eleve) 
                           {
                            Vector<String> row = new Vector<>();
                            row.add(" "+detail.id());
                            row.add(" "+detail.getUsername());
                            row.add(" "+detail.getclasse());
                            row.add(" "+detail.getnote());
                            row.add(" "+detail.getnote2());
                            row.add(" "+detail.periode());
                            row.add(" "+detail.date());

                             model.addRow( row );
                            }

            jTable1.setModel(model);

         in.close();

} 
private void liste_classe() throws IOException, JSONException{
		String url = memoire.liste_classe;
		String inline = null;
		URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		StringBuilder sb = new StringBuilder();
                            URL urln = new URL(memoire.liste_classe);
                            HttpURLConnection conn = (HttpURLConnection)urln.openConnection();
                             conn.setRequestMethod("GET"); 
                             conn.connect(); 
                            int responsecode = conn.getResponseCode(); 
        if(responsecode != 200)
            throw new RuntimeException("HttpResponseCode: " +responsecode);

     else{
         Scanner sc = new Scanner(urln.openStream());

              while(sc.hasNext()){
                  inline = sc.nextLine().trim();
              }
                		System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            try {
                                jsonArray = bj.getJSONArray("victoire");
                   
                } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null,"DESOLE , Il n'existe aucun élèment portant sur votre recherche");
                }
            String address = jsonArray.getJSONObject(0).getString("nom_classe");
            
 classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Classes diponibles" }));

    for(int i=0; i<jsonArray.length(); i++){
            JSONObject eleve = jsonArray.getJSONObject(i);
            String nom_eleve = eleve.getString("nom_classe");
             classe.addItem(nom_eleve);

                		System.out.println("NOM DES ELEVES  "+nom_eleve);
   
           sc.close();
       }
} 
}

private void liste_eleve_insolvable_etab() throws IOException, JSONException{
			String url = memoire.liste_eleve_insolvables;

             URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		con.setRequestMethod("POST");
		con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
               		
		
		// Send post request
		con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		 

    		String inputLine,inline = null;

		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
		 response.append(inputLine.trim());
                    inline = inputLine.trim();
		System.out.println("Response Code : " + response.append(inputLine));

		}
                		System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            try {
                                jsonArray = bj.getJSONArray("victoire");
                   
                } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null,"DESOLE , Il n'existe aucun élèment portant sur votre recherche");
                }

             List<model_eleves> liste_eleve = new ArrayList<model_eleves>(); 


                for(int i=0; i<jsonArray.length(); i++){
                        JSONObject s11 = jsonArray.getJSONObject(i);

                         String code = s11.getString("id_eleve");

                         String nom_eleve = s11.getString("nom");
                         String classew = s11.getString("date_naissance");
                         String note1_eleve = s11.getString("lieu_naissance");
                         String note2_eleve = s11.getString("etat_frais");
                         String sexe=s11.getString("sexe");
                         String periode = s11.getString("date_paiement");
                         
                       
                         liste_eleve.add(new model_eleves( code,nom_eleve,classew,note1_eleve,sexe,note2_eleve,periode));

                            }
     in.close();
                                  effectif.setText("Effectif total : "+ jsonArray.length());
                        total=0;
                            final  JInternalFrame jInternalFrame1;
                               jInternalFrame1 = new JInternalFrame("Internal Frame "  ,  true, true, true, true);

                              //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
                               String[] columnNames = {"CODE","NOM et prenoms élève","date naissance","lieu" , "sexe", "Etat des frais", "date inscription","  "};
                                    DefaultTableModel model = new DefaultTableModel(columnNames, 0);

                         for( final model_eleves detail : liste_eleve) 
                           {
                            Vector<String> row = new Vector<>();
                            row.add(" "+detail.id());
                            row.add(" "+detail.getUsername());
                            row.add(" "+detail.getclasse());
                            row.add(" "+detail.getnote());
                            row.add(" "+detail.getnote2());
                            row.add(" "+detail.periode());
                            row.add(" "+detail.date());

                             model.addRow( row );
                            }

            jTable1.setModel(model);

         in.close();

} 

 class PrintTable extends JPanel implements Printable { 
   public PrintTable() 
        { 
            this.setLayout(new BorderLayout()); 
            JLabel title = new JLabel("title"); 
            title.setBounds(295,5,300,20); 
            this.add(title); 
          
                    PrinterJob pj = PrinterJob.getPrinterJob();    
                    pj.setPrintable(PrintTable.this);    
                    pj.printDialog();    
                    try
                    { 
                        pj.print();    
                    } 
                    catch (Exception PrintException) 
                    { 
                    }         
           
        } 
  
   public int print(Graphics g, PageFormat pageFormat, int pageIndex)throws PrinterException 
        { 
            Graphics2D g2 = (Graphics2D)g; 
            g2.setColor(Color.black); 
            int fontHeight = g2.getFontMetrics().getHeight(); 
            int fontDescent = g2.getFontMetrics().getDescent(); 
     
            // reserve spaces for page number 
            double pageHeight = pageFormat.getImageableHeight() - fontHeight;    
            double pageWidth = pageFormat.getImageableWidth(); 
            double tableWidth = jTable1.getColumnModel().getTotalColumnWidth();
            double scale = 1; 
            if (tableWidth >= pageWidth) 
            {    
                scale = pageWidth / tableWidth; 
            } 
            double headerHeightOnPage = jTable1.getTableHeader().getHeight()*scale; 
            double tableWidthOnPage = tableWidth * scale; 
            double oneRowHeight = (jTable1.getRowHeight() + jTable1.getRowMargin())*scale; 
            int numRowsOnAPage = (int)((pageHeight-headerHeightOnPage) / oneRowHeight); 
            double pageHeightForTable = oneRowHeight * numRowsOnAPage; 
            int totalNumPages = (int)Math.ceil(((double)jTable1.getRowCount()) / numRowsOnAPage); 
            if (pageIndex >= totalNumPages)    
                return NO_SUCH_PAGE; 
             
            g2.translate(pageFormat.getImageableX(), pageFormat.getImageableY()); 
                        g2.drawString(memoire_intendance.titre
 +"   "+"Page: " + (pageIndex +1),(int)pageWidth/2 - 80, (int)(pageHeight + fontHeight - fontDescent)); 

            g2.translate(0f, headerHeightOnPage); 
            g2.translate(0f, -pageIndex*pageHeightForTable); 
                       if (pageIndex + 1 == totalNumPages) 
            {    
                int lastRowPrinted = numRowsOnAPage * pageIndex;    
                int numRowsLeft = jTable1.getRowCount() - lastRowPrinted;    
                g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int)Math.ceil(tableWidthOnPage),(int)Math.ceil(oneRowHeight * numRowsLeft)); 
            } 
                       else
            { 
                g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int)Math.ceil(tableWidthOnPage),(int)Math.ceil(pageHeightForTable)); 
            } 
            g2.scale(scale, scale); 
            jTable1.paint(g2); 
                        g2.scale(1/scale, 1/scale); 
            g2.translate(0f, pageIndex*pageHeightForTable); 
            g2.translate(0f, -headerHeightOnPage); 
            g2.setClip(0, 0,(int)Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage)); 
            g2.scale(scale, scale); 
            jTable1.getTableHeader().paint(g2); 
            return Printable.PAGE_EXISTS; 
        } 
   
    }
 class impression_recus extends JPanel implements Printable { 
   public impression_recus() 
        { 
        PrinterJob pj = PrinterJob.getPrinterJob();	
        pj.setPrintable(impression_recus.this);	
        pj.printDialog();	
        try {
            pj.setJobName("Impression");
            PageFormat pf = pj.defaultPage();
            Paper p = pf.getPaper();
            p.setImageableArea(1, 1, 1024,1024);
            pf.setPaper(p);
            pf.setOrientation(PageFormat.PORTRAIT);
            System.out.println("pf.largeur hauteur()="+pf.getHeight()+"  pf.largeur obtenu="+pf.getWidth());
            pj.setPrintable(this,pf);
            pj.print();
        } catch (Exception PrintException) {
            JOptionPane.showMessageDialog(null, "Erreur lors de l'impression \n[ motif : "+PrintException.getMessage()+" ]");
            PrintException.printStackTrace();
        
        }
        } 
  
   
   public int print(Graphics g, PageFormat pageFormat, int pageIndex)throws PrinterException 
        { 
            Graphics2D g2 = (Graphics2D)g; 
            g2.setColor(Color.black); 
            if (pageIndex> 0) {
         return NO_SUCH_PAGE;
         
    }           	       
            	        g2.drawImage((new ImageIcon()).getImage(),250, 20,70, 50, null);

            
            g2.drawImage((new ImageIcon(memoire.filigran)).getImage(), 430, 20,100,100, null);          
            g2.setColor(Color.DARK_GRAY);

            g2.drawString("Ministere des enseignements secondaires", 20, 20); g2.drawString("REPUBLIQUE DU CAMEROUN", 400, 20);
	        g2.drawString("Paix-travail-patrie", 400, 30);
                                g2.setColor(Color.red);

	        g2.drawString("RECU DE PAIMENT DE FRAIS", 220, 55);
                                        g2.setColor(Color.DARK_GRAY);

	        g2.drawString(memoire.ecole, 20, 35);

            //g2.drawImage((new ImageIcon(report.getEntete().getLinkLogo())).getImage(), 250, 10,70, 50, null);
	        g2.drawString("Annee Scolaire : "+memoire.anne_scolaire, 20, 50);

	        g2.drawString("BP : "+memoire_intendance.bp+" "+memoire.telephone_ecole, 20, 60);
                                g2.setColor(Color.DARK_GRAY);

	        g2.drawString(""+new SimpleDateFormat("EEEE, dd MMMM yyyy").format(new Date()), 20, 75);
                 g2.setColor(Color.LIGHT_GRAY);

	        g2.drawLine(1, 80, 600, 80);
                g2.setColor(Color.blue);

                 g2.setFont(new Font(Font.MONOSPACED,Font.BOLD,12));
	       
	        int positionY = 110,positionX=20;
	        /*profile*/
                 g2.setColor(Color.LIGHT_GRAY);

	        g2.setFont(new Font(Font.MONOSPACED,Font.BOLD,10));
	        g2.drawRect(positionX, positionY, 550, 45);
                                        g2.setColor(Color.black);

	        g2.drawString("Nom(s) et prenom(s) de l'élève : "+memoire_intendance.nom, positionX+100, positionY-10);
	        positionY+=15;
                                g2.setColor(Color.DARK_GRAY);

	        g2.drawString("Classe  : "+memoire_intendance.classe, positionX+10, positionY);
	       // g2.drawRect(positionX, positionY, 650, 45);
                                g2.setColor(Color.DARK_GRAY);

	        g2.drawString("  Objet lié au paiement : "+memoire_intendance.but, positionX, positionY+20);
                                g2.setColor(Color.LIGHT_GRAY);

                	        g2.drawRect(positionX, positionY+5, 550, 45);
                                g2.setColor(Color.DARK_GRAY);

                g2.drawString("  Montant  payé : "+memoire_intendance.prix+" FCFA", positionX, positionY+40);
                                        g2.setColor(Color.LIGHT_GRAY);

                	        g2.drawRect(positionX, positionY+5, 550, 45);
                                g2.setColor(Color.DARK_GRAY);

 g2.drawString("Fait par Mr/Mdme : "+memoire_intendance.nom_user, positionX+290, positionY+85);
	        g2.drawString("Signature :", positionX+290, positionY+95);
	       	        positionY+=15;
                    g2.setColor(Color.blue);
    
               return PAGE_EXISTS;	
    }

  }
  
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

                    int option = showConfirmDialog(null, "Voulez-vous quitter cette page ?", "Arrêt de la connexion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if(option == JOptionPane.OK_OPTION){
                                    JFrame Page_enseignant = new connexion();
               Page_enseignant.setVisible(true);
                    }
             dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
                    JFrame autres = new autres();
               autres.setVisible(true);
                    
                    // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2MouseClicked

    private void impressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impressionActionPerformed
        new PrintTable();          // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_impressionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(secretaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(secretaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(secretaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(secretaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new secretaire().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> classe;
    private javax.swing.JLabel effectif;
    private javax.swing.JButton impression;
    private javax.swing.JButton jButton1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel user;
    // End of variables declaration//GEN-END:variables
}
