/*,m
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intendancee;

import com.pack.entity.Entete;
import etablissement.Curseur;
import etablissement.connexion;
import etablissement.memoire;
import etablissement.memoire1;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;
import static javax.swing.JOptionPane.showConfirmDialog;
import paie.personnel.paie_personnel_enseignant;

/**
 *
 * @author Michelle Wafo
 */
public class Intendancee extends javax.swing.JFrame {

    org.json.JSONArray jsonArray;
    private javax.swing.JButton impression;
    private javax.swing.JMenu solde;
    private String erreur = null;
    private javax.swing.JButton deconnexion;
    int paye = 0, part1 = 0, part2 = 0, imp = 0;
    public static String[] classess;

    JMenuItem suppsercretaire, Asecretaire, tt_ecole, inscription, modifier_compte, consulter_ele_classe, ajout_sortie, ajout_entree, confirmer_sortie, confirmer_entree, consulter_sortie_confirmee, consulter_entree_confirmee, eleve_insolvable, tous_eleve;
    String urObjctInCell = null, soldes = null, copmt = null, objet = null;
    int x = 0, total = 0;
    DefaultTableModel model, model1;
    String nom = null, choixjtabnle;
    private JLabel user;
    private javax.swing.JComboBox<String> classe;

    public Intendancee() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        effectif = new javax.swing.JLabel();
        user = new javax.swing.JLabel();
        classe = new javax.swing.JComboBox<>();
        impression = new javax.swing.JButton();
        deconnexion = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        solde = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon(memoire.setup).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jInternalFrame1.setMinimumSize(new java.awt.Dimension(38, 100));
        jInternalFrame1.setVisible(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String[]{
                    "Bienvenue", "a", "Bestschool", "Azukulu"
                }
        ) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        }
        );
        jTable1.setRowHeight(32);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1.getContentPane().setBackground(Color.green);
        jInternalFrame1Layout.setHorizontalGroup(
                jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
                jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 68, Short.MAX_VALUE))
        );

        effectif.setFont(new java.awt.Font("Segoe Script", 0, 14)); // NOI18N

        user.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N

        classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"    "}));

        impression.setText("imprimer");
        impression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impressionActionPerformed(evt);
            }
        });

        deconnexion.setText("Fermer");
        deconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnexionActionPerformed(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jMenu1.setText("Gestion des entrées de fonds");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("            Gestion des sortiesde fonds");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("    Gestion des élèves");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("      Mon compte");
        jMenuBar1.add(jMenu4);

        solde.setText("   Solde etablissement ");
        jMenu5.setText("      Paie du personnel/enseignant");

        solde.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                soldeMouseClicked(evt);
            }
        });
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paie(evt);
            }
        });
        jMenuBar1.add(solde);
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(deconnexion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(105, 105, 105)
                                                .addComponent(classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(impression)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                                                .addComponent(user)
                                                .addGap(235, 235, 235))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(effectif)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(user)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(impression))))
                                        .addComponent(deconnexion))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(effectif)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void impressionActionPerformed(java.awt.event.ActionEvent evt) {

        new PrintTable();          // TODO add your handling code here:
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {

        if (choixjtabnle == "sortie") {
            final JTable t = (JTable) evt.getSource();
            x = t.getSelectedRow();
            final int y = t.getSelectedColumn();
            urObjctInCell = (String) t.getValueAt(x, 0);
            System.out.println("Code : " + urObjctInCell);
            nom = (String) t.getValueAt(x, 1);
            soldes = (String) t.getValueAt(x, 2);
            copmt = (String) t.getValueAt(x, 7);
            objet = (String) t.getValueAt(x, 3);
            int option;

            if (!copmt.equals("<html><font size=\"3\" face=\"verdana\" color=\"red\">DECHARGE  !</font></html>")) {

                option = JOptionPane.showConfirmDialog(null, "Confirmez vous la décharge  de M. : " + nom + " ", "DECHARGE DES FONDS ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                if (option == JOptionPane.OK_OPTION) {

                    try {

                        Validation_decharge(urObjctInCell, soldes);
                        if (erreur.equals("oui")) {
                            System.out.println("Erreur  aa : " + erreur);

                        } else {
                            System.out.println("Erreur  : " + erreur);

                            model.setValueAt("<html><font size=\"3\" face=\"verdana\" color=\"red\">DECHARGE  !</font></html>", x, 7);
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showConfirmDialog(null, "Vous avez deja confirme cette  \n DECHARGE DES FONDS", "DECHARGE DES FONDS ", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            }

        } else {
            final JTable t = (JTable) evt.getSource();
            x = t.getSelectedRow();
            final int y = t.getSelectedColumn();
            urObjctInCell = (String) t.getValueAt(x, 0);
            nom = (String) t.getValueAt(x, 1);
            soldes = (String) t.getValueAt(x, 2);
            copmt = (String) t.getValueAt(x, 7);

            int option;
            if (!copmt.equals("<html><font size=\"3\" face=\"verdana\" color=\"red\">RECU !</font></html>")) {

                option = JOptionPane.showConfirmDialog(null, "Confirmez vous cette créditation du solde  reçu de : M " + nom + " ?", "Confirmation de perception", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                if (option == JOptionPane.OK_OPTION) {

                    model1.setValueAt("<html><font size=\"3\" face=\"verdana\" color=\"red\">RECU !</font></html>", x, 7);
                    try {
                        Validation_entre(urObjctInCell, soldes);
                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    model1.fireTableDataChanged();

                }

            } else {
                option = JOptionPane.showConfirmDialog(null, "Vous avez deja effectue cette operation  \n CREDITATION DES FONDS", "CREDITATION DES FONDS ", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            }

        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        this.setExtendedState(Intendancee.MAXIMIZED_BOTH);

        try {
            liste_classe();
        } catch (IOException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        }
        user.setText(" Bienvenue Mr/me l'intendant : " + memoire_intendance.nom_user);

        ajout_sortie = new JMenuItem("Ajouter une sortie de fonds");

        ajout_entree = new JMenuItem("Ajouter une entrée de fonds");
        confirmer_sortie = new JMenuItem("Décharger une sortie de fonds");
        confirmer_entree = new JMenuItem("Confirmer les entrées ");
        consulter_sortie_confirmee = new JMenuItem("Toutes les décharges");
        consulter_entree_confirmee = new JMenuItem("Les entrées confirmées");
        eleve_insolvable = new JMenuItem("Tous les élèves insolvables");
        inscription = new JMenuItem("Inscrire un nouvel élève");
        tous_eleve = new JMenuItem("Elèves par classe");
        consulter_ele_classe = new JMenuItem("élèves insolvables par classe");
        modifier_compte = new JMenuItem("Modifier mot de passe");
        tt_ecole = new JMenuItem("Toute l'école ");
        Asecretaire = new JMenuItem("Ajout nouvelle secretaire ");
        suppsercretaire = new JMenuItem("Supprimer secretaire ");

        jMenu1.add(ajout_entree);
        jMenu1.add(confirmer_entree);
        jMenu1.add(consulter_entree_confirmee);
        jMenu2.add(ajout_sortie);
        jMenu2.add(confirmer_sortie);
        jMenu2.add(consulter_sortie_confirmee);

        jMenu3.add(inscription);
        jMenu3.add(tt_ecole);
        jMenu3.add(tous_eleve);
        jMenu3.add(eleve_insolvable);
        jMenu3.add(consulter_ele_classe);

        jMenu4.add(Asecretaire);
        jMenu4.add(suppsercretaire);
        jMenu4.add(modifier_compte);

        deconnexion.setBackground(Color.red);
        deconnexion.setForeground(Color.white);

        suppsercretaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {

                try {
                    liste_secretaires();
                } catch (IOException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

        Asecretaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {

                user.setText("Ajout d'une nouvelle secretaire");
                setTitle("Ajout d'une nouvelle secretaire");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.cyan);
                JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();

                String mo = JOptionPane.showInputDialog(null, "Veuillez Entrer  son nom", "Nom de la secretaire", JOptionPane.QUESTION_MESSAGE);
                if (mo == null) {
                    JOptionPane.showMessageDialog(null, "Son nom ne doit etre null", "Operation interrompu", JOptionPane.ERROR_MESSAGE);

                } else {
                    String no = JOptionPane.showInputDialog(null, "Veuillez Entrer son numero de telephone", "Numero secretaire", JOptionPane.INFORMATION_MESSAGE);
                    if (no != null && no.length() == 9) {
                        try {
                            ajout_secretaire(mo, no);
                        } catch (IOException ex) {
                            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (JSONException ex) {
                            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(null, "Votre secretaire a ete cree avec succes", "SUCCES", JOptionPane.INFORMATION_MESSAGE);

                        user.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "Numero de votre secretaire incorrect", "Erreur rencontree", JOptionPane.ERROR_MESSAGE);

                    }
                }

            }
        });

        tt_ecole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";
                setTitle("Consultation de tout l'établissement");

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                try {
                    user.setText("Consultation de tout l'établissement");
                    user.setForeground(Color.darkGray);
                    memoire_intendance.titre = getTitle();

                    liste_ecole();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });

        tous_eleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                if (!classe.getSelectedItem().toString().equals("Classes diponibles")) {
                    try {
                        user.setText("ERREUR SURVENUE");
                        setTitle("ERREUR SURVENUE");
                        memoire_intendance.titre = "liste élèves classe :" + classe.getSelectedItem().toString();

                        user.setForeground(Color.red);
                        liste_eleve_classe();

                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    user.setText("");

                    Curseur.jablestopWaitCursor(jInternalFrame1);
                } else {
                    JOptionPane.showMessageDialog(null, "Veuillez selectionner la classe en question avant de continuer");

                }
            }
        });

        consulter_ele_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                if (!classe.getSelectedItem().toString().equals("Classes diponibles")) {
                    user.setText("Liste des  élèves insolvables dans la classe de : " + classe.getSelectedItem().toString());
                    user.setForeground(Color.darkGray);
                    setTitle("Elèves insolvables  classe de : " + classe.getSelectedItem().toString());
                    memoire_intendance.titre = "Elèves insolvables :" + classe.getSelectedItem().toString();

                    try {

                        liste_eleve_insolvable_classe();

                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    user.setText("");

                    Curseur.jablestopWaitCursor(jInternalFrame1);
                } else {
                    JOptionPane.showMessageDialog(null, "Veuillez selectionner la classe en question avant de continuer");

                }
            }
        });

        consulter_ele_classe.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                if (!classe.getSelectedItem().toString().equals("Classes diponibles")) {
                    user.setText("Liste des  élèves insolvables dans la classe de : " + classe.getSelectedItem().toString());
                    user.setForeground(Color.darkGray);
                    setTitle("Liste des  élèves insolvables dans la classe : " + classe.getSelectedItem().toString());
                    memoire_intendance.titre = "Elèves insolvables :" + classe.getSelectedItem().toString();
                    try {
                        liste_eleve_insolvable_classe();
                    } catch (IOException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    user.setText("");

                    Curseur.jablestopWaitCursor(jInternalFrame1);
                } else {
                    JOptionPane.showMessageDialog(null, "Veuillez selectionner la classe en question avant de continuer");

                }
            }
        });
        eleve_insolvable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";
                Curseur.jtablestartWaitCursor(jInternalFrame1);
                user.setText("Liste des  élèves insolvables dans l'établissement");
                setTitle("Elèves insolvables dans l'établissement ");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.darkGray);
                try {

                    liste_eleve_insolvable_etab();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });

        inscription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                //List<Infoinscription_eleve> enseign = new ArrayList<Infoinscription_eleve>(); 
                user.setText("Inscription d'un  nouvel élève et frais exigibles ");

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                setTitle("Inscription d'un  nouvel élève et frais exigibles ");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.darkGray);
                inscription_eleve zd = null;
                try {
                    zd = new inscription_eleve(null, "Inscription d'un nouvel élève", true);
                } catch (JSONException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                }
                Infoinscription_eleve zInfo = zd.showZDialog();
                JOptionPane jop = new JOptionPane();
                int option;
                option = showConfirmDialog(null, zInfo.toString(), "Informations de l'inscription en cours ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                if (option == JOptionPane.OK_OPTION) {

                    try {
                        if (!memoire_intendance.nom.equals("")) {

                            inscription_eleve();
                        }
                    } catch (JSONException ex) {
                        Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });

        modifier_compte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {

                user.setText("Modification du mot de passe");
                setTitle("Modification du mot de passe ");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.cyan);
                JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();

                String mo = JOptionPane.showInputDialog(null, "Veuillez Entrer votre nouveau mot de passe", "Entrer votre nouveau mot de passe", JOptionPane.QUESTION_MESSAGE);
                if (mo == null || (mo != null && ("".equals(mo)))) {
                    JOptionPane.showMessageDialog(null, "votre mot de passe ne doit pas etre null", "ECHEC", JOptionPane.ERROR_MESSAGE);

                } else {
                    String no = JOptionPane.showInputDialog(null, "Veuillez Confirmer le mot de passe !", "Cofirmation mot de passe", JOptionPane.INFORMATION_MESSAGE);
                    if (mo.equals(no)) {
                        JOptionPane.showMessageDialog(null, "Votre compte a été bien modifié", "SUCCES", JOptionPane.INFORMATION_MESSAGE);

                        try {
                            mdofifier_mot_passe(mo);
                        } catch (IOException ex) {
                            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (JSONException ex) {
                            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Mot de passe mal confirmé", "ECHEC", JOptionPane.ERROR_MESSAGE);

                    }
                    user.setText("");

                }

            }
        });

        consulter_entree_confirmee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                user.setText(" Confirmation de réception des fonds reçu de la part du proviseur");
                setTitle("Confirmation de réception des fonds reçu de la part du proviseur");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.blue);
                try {

                    toutes_decharge_entree();
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });

        consulter_sortie_confirmee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "";
                Curseur.jtablestartWaitCursor(jInternalFrame1);
                user.setText(" Liste des sorties approuvées");
                setTitle("Liste des sorties approuvées");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.red);
                try {

                    liste_des_soties_validee();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });

        confirmer_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "1";
                choixjtabnle = "sortie";
                Curseur.jtablestartWaitCursor(jInternalFrame1);
                user.setText(" Confirmation de décharge des fonds reçu de la part du proviseur");
                setTitle("Confirmation de décharge des fonds reçu de la part du proviseur");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.blue);
                try {

                    liste_des_soties();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });

        confirmer_entree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                memoire1.click = "2";
                choixjtabnle = "entree";
                Curseur.jtablestartWaitCursor(jInternalFrame1);
                user.setText(" Confirmation d'ajout des fonds reçu de la part du proviseur");
                setTitle("Confirmation d'ajout des fonds reçu de la part du proviseur");
                memoire_intendance.titre = getTitle();

                user.setForeground(Color.blue);
                try {

                    liste_des_entrees_confirme();

                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });
        ajout_entree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                user.setText(" Ajout d'une nouvelle entrée de fonds");
                setTitle("Ajout d'une nouvelle entrée de fonds");
                memoire_intendance.titre = getTitle();

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                user.setForeground(Color.blue);
                try {
                    ajout_nouvelle_entree zd = new ajout_nouvelle_entree(null, "Creditation du compte ", true);
                    Ajouteleveinfo zInfo = zd.showZDialog();
                    JOptionPane jop = new JOptionPane();
                    int option;
                    option = showConfirmDialog(null, zInfo.toString(), "le transfert de fonds", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                    if (option == JOptionPane.OK_OPTION) {

                        Ajout_credit();

                    }
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });
        ajout_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                user.setText(" Requete visant la demande de sortie des fonds au sein du proviseur ");
                setTitle("Requete visant la demande de sortie des fonds au sein du proviseur");
                memoire_intendance.titre = getTitle();

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                user.setForeground(Color.blue);
                try {
                    ajout_nouvelle_depense zd = new ajout_nouvelle_depense(null, "Ajout d'une nouvelle depense ", true);
                    Ajouteleveinfo zInfo = zd.showZDialog();
                    JOptionPane jop = new JOptionPane();
                    int option;
                    option = showConfirmDialog(null, zInfo.toString(), "veuilez bien confirmer la depense ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                    if (option == JOptionPane.OK_OPTION) {

                        Ajout_depense();

                    }
                } catch (IOException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
                }
                user.setText("");

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });

        // TODO add your handling code here:
    }

    private void liste_secretaires() throws IOException, JSONException {

        String url = memoire_intendance.liste_secretaires;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        StringBuilder sb = new StringBuilder();
        URL urln = new URL(url);
        HttpURLConnection conn = (HttpURLConnection) urln.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        int responsecode = conn.getResponseCode();
        if (responsecode != 200) {
            throw new RuntimeException("HttpResponseCode: " + responsecode);
        } else {
            Scanner sc = new Scanner(urln.openStream());
            String inlinee = null;
            while (sc.hasNext()) {
                inlinee = sc.nextLine().trim();
            }
            System.out.println(inlinee);

            try {
                org.json.JSONObject bj = new JSONObject(inlinee);
                jsonArray = bj.getJSONArray("victoire");
                String address = jsonArray.getJSONObject(0).getString("nom");

            } catch (JSONException es) {
                showConfirmDialog(null, "Désolé, mais il n'existe pas de secretaires", "Erreur survenue",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            }

            classess = new String[jsonArray.length()];

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject eleve = jsonArray.getJSONObject(i);

                String nom_eleve = eleve.getString("nom");
                //classe.addItem(nom_eleve);

                classess[i] = nom_eleve;

            }
            JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();
            String nom = (String) JOptionPane.showInputDialog(null,
                    "Veuillez selectionner la secretaire en question!",
                    "Supprimer,  Modifier ou renvoyer une secretaire !",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    classess,
                    classess.length);
            int option;
            option = showConfirmDialog(null, "NOM du concerne : " + nom, " Confirmez vous sa suppression  ?",
                     JOptionPane.INFORMATION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {

                desactiver_secretaire(nom);

            }
            sc.close();

        }

    }

    private void paie() throws JSONException, IOException {

        String url = memoire.paie_enseignants;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "montant=" + memoire_intendance.prix + "&nom=" + memoire_intendance.nom + "&mois=" + memoire_intendance.classe
                + "&but=" + memoire_intendance.but + "&payeur=" + memoire_intendance.nom_user;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }

        org.json.JSONObject bj = new JSONObject(test);

        org.json.JSONObject jsonArray = bj.getJSONObject("personne");
        org.json.JSONObject erreur = bj.getJSONObject("connecter");
        String ereur = erreur.getString("erreur");
        System.out.println(ereur);

        if (ereur.equals("non")) {
            JOptionPane jo = new JOptionPane();
            int op;
            op = showConfirmDialog(null, "Paie effectuee avec succes !\nSouhaitez vous imprimer le reçu ?", "Impression du reçu ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (op == JOptionPane.OK_OPTION) {
                new impression_recus_paie();
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Erreur de correspondance de paie\nIl se pourrait que ce personnel soit deja paye pour ce mois ", "Attention erreur survenue", JOptionPane.ERROR_MESSAGE);

        }
        user.setText("Paie en cours du personnel ");

        Curseur.jtablestartWaitCursor(jInternalFrame1);
        setTitle("       Paie en cours du personnel  ");
        memoire_intendance.titre = getTitle();

        user.setForeground(Color.darkGray);
        paie_personnel_enseignant zd = null;
        try {
            zd = new paie_personnel_enseignant(null, "    Paie en cours du personnel  ", true);
        } catch (JSONException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        }
        infopaie zInfo = zd.showZDialog();
        JOptionPane jop = new JOptionPane();
        int option;
        option = showConfirmDialog(null, zInfo.toString(), "   Confirmez-vous la paie de ce personnel ?  ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

        if (option == JOptionPane.OK_OPTION) {

            try {
                if (!memoire_intendance.nom.equals("")) {

                    paie();
                }
            } catch (JSONException ex) {
                Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        Curseur.jtablestopWaitCursor(jInternalFrame1);

    }

    private void soldeMouseClicked(java.awt.event.MouseEvent evt) {
        try {

            solde();

        } catch (IOException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(ProviseurEcole.class.getName()).log(Level.SEVERE, null, ex);
        }
        user.setText("");
// TODO add your handling code here:
    }

    private void paie(java.awt.event.MouseEvent evt) {

        user.setText("Paie en cours du personnel ");

        Curseur.jtablestartWaitCursor(jInternalFrame1);
        setTitle("       Paie en cours du personnel  ");
        memoire_intendance.titre = getTitle();

        user.setForeground(Color.darkGray);
        paie_personnel_enseignant zd = null;
        try {
            zd = new paie_personnel_enseignant(null, "    Paie en cours du personnel  ", true);
        } catch (JSONException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        }
        infopaie zInfo = zd.showZDialog();
        JOptionPane jop = new JOptionPane();
        int option;
        option = showConfirmDialog(null, zInfo.toString(), "   Confirmez-vous la paie de ce personnel ?  ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

        if (option == JOptionPane.OK_OPTION) {

            try {
                if (!memoire_intendance.nom.equals("")) {

                    paie();
                }
            } catch (JSONException ex) {
                Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        Curseur.jtablestopWaitCursor(jInternalFrame1);

    }

    private void deconnexionActionPerformed(java.awt.event.ActionEvent evt) {

        int option = showConfirmDialog(null, "Voulez-vous quitter cette page ?", "Arrêt de la saisie des notes",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {
            JFrame Page_enseignant = new connexion();
            Page_enseignant.setVisible(true);
        }
        dispose();
        // TODO add your handling code here:
    }

    private void solde() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        String url = memoire_intendance.solde;
        String inline = null;
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        StringBuilder sb = new StringBuilder();
        URL urln = new URL(memoire_intendance.solde);
        HttpURLConnection conn = (HttpURLConnection) urln.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        int responsecode = conn.getResponseCode();
        if (responsecode != 200) {
            throw new RuntimeException("HttpResponseCode: " + responsecode);
        } else {
            Scanner sc = new Scanner(urln.openStream());

            while (sc.hasNext()) {
                inline = sc.nextLine().trim();
            }
            System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);
            org.json.JSONObject eleve = bj.getJSONObject("victoire");

            String principale = null, entree = null, sortie = null;
            principale = eleve.getString("solde_principal");
            entree = eleve.getString("solde_entree");
            sortie = eleve.getString("solde_sortie");

            sc.close();

            JOptionPane.showMessageDialog(null, "LE SOLDE DE VOTRE ETABLISSEMENT  :" + "\n\n"
                    + "Solde entree : " + principale + " FCFA\n"
                    + "Solde sortie : " + sortie + " FCFA\n"
                    + "Solde principal : " + principale + " FCFA");

        }
        Curseur.stopWaitCursor(this);

    }

    public void Validation_entre(String id, String solde) throws IOException, JSONException {

        Curseur.startWaitCursor(this);

        String url = memoire_intendance.valider_entree;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "id_budget=" + id + "&montant=" + solde;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        in.close();
        Curseur.stopWaitCursor(this);

    }

    public void desactiver_secretaire(String id) throws IOException, JSONException {
        Curseur.startWaitCursor(this);

        String url = memoire_intendance.desactiver_secretaire;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "nom=" + id;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        in.close();
        JOptionPane.showMessageDialog(null, "Suppression reussie", "SUCCES", JOptionPane.INFORMATION_MESSAGE);
        Curseur.stopWaitCursor(this);

    }

    public void mdofifier_mot_passe(String id) throws IOException, JSONException {
        Curseur.startWaitCursor(this);

        PasswordAuthentication f = new PasswordAuthentication();

        String pass = f.hash(id);
        System.out.println("MOT de passe hashe : " + pass);

        String url = memoire_intendance.modifier_mot_passe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "password=" + pass + "&id_user=" + memoire_intendance.id_user;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        Curseur.stopWaitCursor(this);

    }

    public void ajout_secretaire(String nom, String phone) throws IOException, JSONException {
        Curseur.startWaitCursor(this);

        PasswordAuthentication f = new PasswordAuthentication();

        String url = memoire_intendance.ajout_secretaire;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "nom=" + nom + "&telephone=" + phone;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        Curseur.stopWaitCursor(this);

    }

    public void Validation_decharge(String id, String solde) throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        String url = memoire_intendance.Validation_decharge;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "id_budget=" + id + "&montant=" + solde;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        in.close();
        org.json.JSONObject bj = new JSONObject(test);
        org.json.JSONObject jsonArray = bj.getJSONObject("personne");
        org.json.JSONObject erreu = bj.getJSONObject("connecter");
        String ereur = erreu.getString("erreur");
        if (ereur.equals("oui")) {
            JOptionPane.showMessageDialog(null, "Votre solde principal est inférieur", "ECHEC", JOptionPane.ERROR_MESSAGE);
            erreur = "oui";
        } else {
            JOptionPane.showMessageDialog(null, "  Votre debit a été bien éffectué ", " SUCCES DE L'OPERATION", JOptionPane.INFORMATION_MESSAGE);
            erreur = "non";
            new impression_recus_decharge();

        }
        Curseur.stopWaitCursor(this);

    }

    public void Ajout_depense() throws IOException, JSONException {
        Curseur.startWaitCursor(this);

        String url = memoire_intendance.Ajout_depense;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "montant=" + memoire_intendance.prix + "&periode=" + memoire_intendance.periode + "&description=" + memoire_intendance.desciption
                + "&but=" + memoire_intendance.but + "&createur=" + memoire_intendance.id_user;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        JOptionPane.showMessageDialog(null, "Votre demande pour la sortie des fonds a été enregistré avec succès");
        Curseur.stopWaitCursor(this);

    }

    public void inscription_eleve() throws IOException, JSONException {
        Curseur.startWaitCursor(this);

        String url = memoire.inscription_eleve;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "montant=" + memoire_intendance.prix + "&nom=" + memoire_intendance.nom + "&classe=" + memoire_intendance.classe
                + "&but=" + memoire_intendance.but + "&id_user=" + memoire_intendance.id_user + "&paie=" + memoire_intendance.cateristiques_paie;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }

        org.json.JSONObject bj = new JSONObject(test);

        org.json.JSONObject jsonArray = bj.getJSONObject("personne");
        org.json.JSONObject erreur = bj.getJSONObject("connecter");
        String ereur = erreur.getString("erreur");
        System.out.println(ereur);

        if (ereur.equals("non")) {
            JOptionPane jo = new JOptionPane();
            int op;
            op = showConfirmDialog(null, "Eleve inscrit avec succes !\nSouhaitez vous imprimer le reçu ?", "Impression du reçu ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (op == JOptionPane.OK_OPTION) {
                new impression_recus();
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Erreur d'inscription\n veuillez verifier que cet eleve suit l'ordre de paiement des tranches ", "Attention erreur survenue", JOptionPane.ERROR_MESSAGE);

        }
        user.setText("Inscription d'un  nouvel élève et frais exigibles ");
        user.setForeground(Color.darkGray);
        inscription_eleve zd = null;
        try {
            zd = new inscription_eleve(null, "Inscription d'un nouvel élève", true);
        } catch (JSONException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
        }
        Infoinscription_eleve zInfo = zd.showZDialog();
        JOptionPane jop = new JOptionPane();
        int option;
        option = showConfirmDialog(null, zInfo.toString(), "Informations de l'inscription en cours ", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

        if (option == JOptionPane.OK_OPTION) {

            try {
                if (!memoire_intendance.nom.equals("")) {

                    inscription_eleve();
                }
            } catch (JSONException ex) {
                Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Intendancee.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        user.setText("");

        Curseur.stopWaitCursor(this);

    }

    public void Ajout_credit() throws IOException, JSONException {

        Curseur.startWaitCursor(this);

        String url = memoire_intendance.Ajout_fonds;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "montant=" + memoire_intendance.prix + "&periode=" + memoire_intendance.periode + "&description=" + memoire_intendance.desciption
                + "&but=" + memoire_intendance.but + "&createur=" + memoire_intendance.id_user;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        JOptionPane.showMessageDialog(null, "Votre demande pour la créditation du compte\n a été enregistré avec succès");
        Curseur.stopWaitCursor(this);

    }

    private void liste_des_entrees_confirme() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        jTable1.enable(true);
        String url = memoire_intendance.liste_fonds_validees;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
        try {

            String inputLine, inline2 = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline2 = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            org.json.JSONObject bj = new JSONObject(inline2);

            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }
        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();
        effectif.setText("Effectif total : " + jsonArray.length());

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_entree");
            String periode = s11.getString("periode");

            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;

        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM et prénom ( Corncerné)", "Montant demandé", "description", "but", "date de depot", "periode", "Confirmez-vous la reception de fonds"};
        model1 = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add("" + detail.id());
            row.add("" + detail.getUsername());
            row.add("" + detail.getclasse());
            row.add("" + detail.getnote());
            row.add("" + detail.getnote2());
            row.add("" + detail.date());
            row.add("" + detail.periode());
            row.add("Confirmez- vous ?");

            model1.addRow(row);
        }

        jTable1.setModel(model1);

        Curseur.stopWaitCursor(this);

    }

    private void liste_des_soties() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        jTable1.enable(true);
        String url = memoire_intendance.liste_depenses_validee;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        try {
            String inputLine, inline2 = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline2 = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            org.json.JSONObject bj = new JSONObject(inline2);

            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }
        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_entree");
            String periode = s11.getString("periode");

            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM ( Corncerné)", "Montant demandé", "description", "but", "date de depot", "periode", "Confirmer décharge"};
        model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.id());
            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.date());
            row.add(detail.periode());
            row.add("Confirmer la décharge ?");

            model.addRow(row);
        }

        jTable1.setModel(model);

        Curseur.stopWaitCursor(this);

    }

    private void liste_des_soties_validee() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        jTable1.enable(false);
        String url = memoire_intendance.toutes_decharge_sortie;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
        try {

            String inputLine, inline2 = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline2 = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            org.json.JSONObject bj = new JSONObject(inline2);

            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }
        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();
        effectif.setText("Effectif total : " + jsonArray.length());

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_decharge");
            String periode = s11.getString("periode");

            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM ( Corncerné)", "Montant demandé", "description", "but", "date de decharge", "periode", "Etat"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.id());
            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.date());
            row.add(detail.periode());
            row.add("DEJA VALIDE");

            model.addRow(row);
        }

        jTable1.setModel(model);

        Curseur.stopWaitCursor(this);

    }

    private void toutes_decharge_entree() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        jTable1.enable(false);
        String url = memoire_intendance.toutes_decharge_entree;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();
        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        try {
            String inputLine, inline2 = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline2 = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }

            org.json.JSONObject bj = new JSONObject(inline2);

            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }
        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();
        effectif.setText("Effectif total : " + jsonArray.length());

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_budget");

            String nom_eleve = s11.getString("nom");
            String classe = s11.getString("montant");
            String note1_eleve = s11.getString("but");
            String note2_eleve = s11.getString("description");
            String date = s11.getString("date_decharge");
            String periode = s11.getString("periode");

            total += Integer.parseInt(classe);

            liste_eleve.add(new model_eleves(code, nom_eleve, classe, note2_eleve, note1_eleve, periode, date));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length() + "      Montant total : " + total + " FCFA");
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM ( Corncerné)", "Montant demandé", "description", "but", "date de confirmation", "periode", "Etat"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.id());
            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.date());
            row.add(detail.periode());
            row.add("DEJA VALIDE");

            model.addRow(row);
        }

        jTable1.setModel(model);

        Curseur.stopWaitCursor(this);

    }

    private void liste_classe() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        String url = memoire.liste_classe;
        String inline = null;
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        StringBuilder sb = new StringBuilder();
        URL urln = new URL(memoire.liste_classe);
        HttpURLConnection conn = (HttpURLConnection) urln.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        int responsecode = conn.getResponseCode();
        if (responsecode != 200) {
            throw new RuntimeException("HttpResponseCode: " + responsecode);
        } else {
            try {
                Scanner sc = new Scanner(urln.openStream());

                while (sc.hasNext()) {
                    inline = sc.nextLine().trim();
                }
                System.out.println(inline);

                org.json.JSONObject bj = new JSONObject(inline);

                jsonArray = bj.getJSONArray("victoire");

            } catch (JSONException ex) {
                JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
            }
            String address = jsonArray.getJSONObject(0).getString("nom_classe");

            classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Classes diponibles"}));

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject eleve = jsonArray.getJSONObject(i);
                String nom_eleve = eleve.getString("nom_classe");
                classe.addItem(nom_eleve);

                System.out.println("NOM DES ELEVES  " + nom_eleve);

            }
        }
        Curseur.stopWaitCursor(this);

    }

    private void liste_ecole() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        jTable1.enable(false);
        String url = memoire.liste_eleves_etab;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
        try {

            String inputLine, inline = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);

            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        paye = 0;
        part1 = 0;
        part2 = 0;
        imp = 0;
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("nom_classe");
            String note2_eleve = s11.getString("etat_frais");
            String sexe = s11.getString("sexe");
            //String periode = s11.getString("date_paiement");
            switch (note2_eleve) {
                case "impaye":
                    imp = imp + 1;
                    break;
                case "paye":
                    paye = paye + 1;
                    break;
                case "partiellement 1":
                    part1 = part1 + 1;
                    break;
                case "partiellement 2":
                    part2 = part2 + 1;

                    break;
                default:
                    break;
            }

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, note2_eleve));

        }
        in.close();
        // recap.setText("élèves payés : "+paye+"\n élèves impayés :"+imp+"\n uniquement APE : "+part1+"\n élèves payés APE + frais exi. :"+part2);
        effectif.setText("Effectif ecole:" + jsonArray.length() + "   Elèves ayant tout payé :(" + paye + ")\n Elèves impayés :(" + imp + ")\n   Elèves ayant  payé uniquement l' APE :(" + part1 + ")\n  Elèves ayant payé  APE et frais exigi. :(" + part2 + ")");
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "classe", "sexe", "Etat des frais", " ", "  "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());

            model.addRow(row);
        }

        jTable1.setModel(model);

        in.close();
        Curseur.stopWaitCursor(this);

    }

    private void liste_eleve_classe() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        jTable1.enable(false);
        String url = memoire.liste_eleves_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + classe.getSelectedItem();

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);
        try {
            String inputLine, inline = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);

            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        paye = 0;
        part1 = 0;
        part2 = 0;
        imp = 0;
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("lieu_naissance");
            String note2_eleve = s11.getString("etat_frais");
            String sexe = s11.getString("sexe");
            String periode = s11.getString("date_paiement");
            switch (note2_eleve) {
                case "impaye":
                    imp = imp + 1;
                    break;
                case "paye":
                    paye = paye + 1;
                    break;
                case "partiellement 1":
                    part1 = part1 + 1;
                    break;
                case "partiellement 2":
                    part2 = part2 + 1;

                    break;
                default:
                    break;
            }

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, periode));

        }
        in.close();
        // recap.setText("élèves payés : "+paye+"\n élèves impayés :"+imp+"\n uniquement APE : "+part1+"\n élèves payés APE + frais exi. :"+part2);
        effectif.setText("Effectif total classe : " + jsonArray.length() + "   Elèves ayant tout payé : (" + paye + ")\n Elèves impayés : (" + imp + ")\n   Elèves ayant  payé uniquement l' APE : (" + part1 + ")\n  Elèves ayant payé  APE et frais exigi. :  (" + part2 + ")");
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "lieu", "sexe", "Etat des frais", "date de depot", "  "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());
            row.add(" " + detail.date());

            model.addRow(row);
        }

        jTable1.setModel(model);

        in.close();
        Curseur.stopWaitCursor(this);

    }

    private void liste_eleve_insolvable_classe() throws IOException, JSONException {
        String url = memoire.liste_elve_insolvable_classe;
        Curseur.startWaitCursor(this);

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + classe.getSelectedItem();

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline = null;
        try {
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            System.out.println(inline);

            org.json.JSONObject bj = new JSONObject(inline);

            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("lieu_naissance");
            String note2_eleve = s11.getString("etat_frais");
            String sexe = s11.getString("sexe");
            String periode = s11.getString("date_paiement");

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, periode));
        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length());
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);
        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "lieu", "sexe", "Etat des frais", "date Inscription", "  "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());
            row.add(" " + detail.date());
            model.addRow(row);
        }
        jTable1.setModel(model);
        in.close();
        Curseur.stopWaitCursor(this);

    }

    private void liste_eleve_insolvable_etab() throws IOException, JSONException {
        Curseur.startWaitCursor(this);
        jTable1.enable(false);
        String url = memoire.liste_eleve_insolvables;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
        try {

            String inputLine, inline = null;

            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine.trim());
                inline = inputLine.trim();
                System.out.println("Response Code : " + response.append(inputLine));

            }
            System.out.println(inline);
            org.json.JSONObject bj = new JSONObject(inline);
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showMessageDialog(null, "DESOLE , Il n'existe aucun élèment portant sur votre recherche");
        }

        List<model_eleves> liste_eleve = new ArrayList<model_eleves>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String classew = s11.getString("date_naissance");
            String note1_eleve = s11.getString("nom_classe");
            String note2_eleve = s11.getString("etat_frais");
            String sexe = s11.getString("sexe");
            String periode = s11.getString("date_paiement");

            liste_eleve.add(new model_eleves(code, nom_eleve, classew, note1_eleve, sexe, note2_eleve, periode));

        }
        in.close();
        effectif.setText("Effectif total : " + jsonArray.length());
        total = 0;
        final JInternalFrame jInternalFrame1;
        jInternalFrame1 = new JInternalFrame("Internal Frame ", true, true, true, true);

        //final JFrame jInternalFrame2 = new JFrame("Liste des eleves");    
        String[] columnNames = {"CODE", "NOM et prenoms élève", "date naissance", "classe", "sexe", "Etat des frais", "date inscription", "  "};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves detail : liste_eleve) {
            Vector<String> row = new Vector<>();
            row.add(" " + detail.id());
            row.add(" " + detail.getUsername());
            row.add(" " + detail.getclasse());
            row.add(" " + detail.getnote());
            row.add(" " + detail.getnote2());
            row.add(" " + detail.periode());
            row.add(" " + detail.date());

            model.addRow(row);
        }

        jTable1.setModel(model);

        in.close();
        Curseur.stopWaitCursor(this);

    }

    class PrintTable extends JPanel implements Printable {

        public PrintTable() {
            this.setLayout(new BorderLayout());
            JLabel title = new JLabel("title");
            title.setBounds(295, 5, 300, 20);
            this.add(title);

            PrinterJob pj = PrinterJob.getPrinterJob();
            pj.setPrintable(PrintTable.this);
            pj.printDialog();
            try {
                pj.print();
            } catch (Exception PrintException) {
            }

        }

        public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.black);
            int fontHeight = g2.getFontMetrics().getHeight();
            int fontDescent = g2.getFontMetrics().getDescent();

            // reserve spaces for page number 
            double pageHeight = pageFormat.getImageableHeight() - fontHeight;
            double pageWidth = pageFormat.getImageableWidth();
            double tableWidth = jTable1.getColumnModel().getTotalColumnWidth();
            double scale = 1;
            if (tableWidth >= pageWidth) {
                scale = pageWidth / tableWidth;
            }
            double headerHeightOnPage = jTable1.getTableHeader().getHeight() * scale;
            double tableWidthOnPage = tableWidth * scale;
            double oneRowHeight = (jTable1.getRowHeight() + jTable1.getRowMargin()) * scale;
            int numRowsOnAPage = (int) ((pageHeight - headerHeightOnPage) / oneRowHeight);
            double pageHeightForTable = oneRowHeight * numRowsOnAPage;
            int totalNumPages = (int) Math.ceil(((double) jTable1.getRowCount()) / numRowsOnAPage);
            if (pageIndex >= totalNumPages) {
                return NO_SUCH_PAGE;
            }

            g2.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

            g2.drawString(memoire_intendance.titre
                    + "   " + "Page: " + (pageIndex + 1), (int) pageWidth / 2 - 80, (int) (pageHeight + fontHeight - fontDescent));
            g2.translate(0f, headerHeightOnPage);
            g2.translate(0f, -pageIndex * pageHeightForTable);
            if (pageIndex + 1 == totalNumPages) {
                int lastRowPrinted = numRowsOnAPage * pageIndex;
                int numRowsLeft = jTable1.getRowCount() - lastRowPrinted;
                g2.setClip(0, (int) (pageHeightForTable * pageIndex), (int) Math.ceil(tableWidthOnPage), (int) Math.ceil(oneRowHeight * numRowsLeft));
            } else {
                g2.setClip(0, (int) (pageHeightForTable * pageIndex), (int) Math.ceil(tableWidthOnPage), (int) Math.ceil(pageHeightForTable));
            }
            g2.scale(scale, scale);
            jTable1.paint(g2);
            g2.scale(1 / scale, 1 / scale);
            g2.translate(0f, pageIndex * pageHeightForTable);
            g2.translate(0f, -headerHeightOnPage);
            g2.setClip(0, 0, (int) Math.ceil(tableWidthOnPage), (int) Math.ceil(headerHeightOnPage));
            g2.scale(scale, scale);
            jTable1.getTableHeader().paint(g2);
            return Printable.PAGE_EXISTS;
        }

    }

    class impression_recus extends JPanel implements Printable {

        public impression_recus() {
            PrinterJob pj = PrinterJob.getPrinterJob();
            pj.setPrintable(impression_recus.this);
            pj.printDialog();
            try {
                pj.setJobName("Impression recu");
                PageFormat pf = pj.defaultPage();
                Paper p = pf.getPaper();
                p.setImageableArea(1, 1, 1024, 1024);
                pf.setPaper(p);
                pf.setOrientation(PageFormat.PORTRAIT);
                System.out.println("pf.largeur hauteur()=" + pf.getHeight() + "  pf.largeur obtenu=" + pf.getWidth());
                pj.setPrintable(this, pf);
                pj.print();
            } catch (Exception PrintException) {
                JOptionPane.showMessageDialog(null, "Erreur lors de l'impression \n[ motif : " + PrintException.getMessage() + " ]");
                PrintException.printStackTrace();

            }
        }

        public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.black);
            if (pageIndex > 0) {
                return NO_SUCH_PAGE;
            }

            Entete report = new Entete();
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getHierarchieLevel1().toUpperCase(), 20, 40);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString(report.getHierarchieLevel1a(), 25, 50);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getCountry().toUpperCase().toUpperCase(), 440, 40);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString("Republic of Cameroon", 442, 50);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getHierarchieLevel2().toUpperCase(), 20, 65);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString(report.getHierarchieLevel2a(), 25, 75);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getDevice().toUpperCase(), 460, 70);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString("Peace-Work-Fatherland", 463, 80);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getHierarchieLevel3().toUpperCase(), 20, 90);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString(report.getHierarchieLevel3a(), 25, 100);
            g2.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 12));
            g2.drawString(report.getSchool().toUpperCase(), 200, 123);
            g2.drawImage((new ImageIcon(report.getLinkLogo())).getImage(), 250, 35, 70, 60, null);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString("Annee Scolaire/", 20, 140);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 10));
            g2.drawString("     School year : " + report.getAnneeScolaire(), 100, 140);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString("BP " + report.getBp() + "   Tel/phone : " + report.getNumero(), 20, 150);
            g2.drawString("Date : " + new SimpleDateFormat("EEEE, dd MMMM yyyy").format(new Date()), 20, 160);
            // g2.drawString("Liste élève "+, 115, 170);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 14));
            g2.setColor(Color.LIGHT_GRAY);
            g2.fillRect(19, 185 - 20, 552, 25);
            g2.setColor(Color.black);
            //g2.drawLine(1, 80, 600, 80);
            g2.setColor(Color.blue);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));

            int positionY = 190, positionX = 20;
            /*profile*/
            g2.setColor(Color.LIGHT_GRAY);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            //g2.drawRect(positionX, positionY, 550, 45);
            g2.setColor(Color.black);
            g2.drawString("Nom(s) et prenom(s) de l'élève : " + memoire_intendance.nom.toUpperCase(), positionX + 100, positionY - 10);
            positionY += 15;
            g2.setColor(Color.blue);

            g2.drawString("Classe  : " + memoire_intendance.classe, positionX + 10, positionY);
            // g2.drawRect(positionX, positionY, 650, 45);
            g2.setColor(Color.black);
            positionY += 20;

            for (String tran : memoire.periode) {
                g2.drawString(tran + " FCFA", positionX, positionY);
                positionY += 15;
            }
            g2.drawString("Periode ou tranche  de paiement : " + memoire_intendance.but, positionX, positionY + 20);
            g2.setColor(Color.LIGHT_GRAY);
            g2.drawRect(positionX, positionY + 5, 550, 90);
            g2.setColor(Color.black);
            System.out.print(" total a payer " + memoire_intendance.reste + " payer" + memoire_intendance.prix);
            g2.drawString("Montant total payé : " + memoire_intendance.prix + " FCFA", positionX, positionY + 40);

            int reste = memoire_intendance.reste - Integer.parseInt(memoire_intendance.prix);
            g2.drawString("Reste à payer : " + reste + " FCFA", positionX + 280, positionY + 40);
            g2.setColor(Color.LIGHT_GRAY);
            g2.drawRoundRect(positionX, positionY + 5, 550, 45, 6, 6);
            g2.setColor(Color.DARK_GRAY);
            g2.drawString("Fait par Mr/Mdme : " + memoire_intendance.nom_user, positionX + 280, positionY + 75);
            g2.drawString("Signature :", positionX + 280, positionY + 90);
            positionY += 15;
            g2.setColor(Color.blue);
            return PAGE_EXISTS;
        }

    }

    class impression_recus_paie extends JPanel implements Printable {

        public impression_recus_paie() {
            PrinterJob pj = PrinterJob.getPrinterJob();
            pj.setPrintable(impression_recus_paie.this);
            pj.printDialog();
            try {
                pj.setJobName("Impression recu " + memoire.nom + " pour " + memoire.classe);
                PageFormat pf = pj.defaultPage();
                Paper p = pf.getPaper();
                p.setImageableArea(1, 1, 1024, 1024);
                pf.setPaper(p);
                pf.setOrientation(PageFormat.PORTRAIT);
                System.out.println("pf.largeur hauteur()=" + pf.getHeight() + "  pf.largeur obtenu=" + pf.getWidth());
                pj.setPrintable(this, pf);
                pj.print();
            } catch (Exception PrintException) {
                JOptionPane.showMessageDialog(null, "Erreur lors de l'impression \n[ motif : " + PrintException.getMessage() + " ]");
                PrintException.printStackTrace();

            }
        }

        public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.black);
            if (pageIndex > 0) {
                return NO_SUCH_PAGE;

            }

            Entete report = new Entete();
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));

            g2.drawString(report.getHierarchieLevel1().toUpperCase(), 20, 40);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString(report.getHierarchieLevel1a(), 25, 50);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getCountry().toUpperCase().toUpperCase(), 440, 40);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString("Republic of Cameroon", 442, 50);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getHierarchieLevel2().toUpperCase(), 20, 65);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString(report.getHierarchieLevel2a(), 25, 75);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getDevice().toUpperCase(), 460, 70);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString("Peace-Work-Fatherland", 463, 80);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString(report.getHierarchieLevel3().toUpperCase(), 20, 90);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 12));
            g2.drawString(report.getHierarchieLevel3a(), 25, 100);
            g2.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 12));
            g2.drawString(report.getSchool().toUpperCase(), 200, 123);
            g2.drawImage((new ImageIcon(report.getLinkLogo())).getImage(), 250, 35, 70, 60, null);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString("Annee Scolaire/", 20, 140);
            g2.setFont(new Font(Font.SERIF, Font.ITALIC, 10));
            g2.drawString("     School year : " + report.getAnneeScolaire(), 100, 140);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawString("BP " + report.getBp() + "   Tel/phone : " + report.getNumero(), 20, 150);
            g2.drawString("Date : " + new SimpleDateFormat("EEEE, dd MMMM yyyy").format(new Date()), 20, 160);
            // g2.drawString("Liste élève "+, 115, 170);
            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 14));
            g2.setColor(Color.LIGHT_GRAY);
            g2.fillRect(19, 185 - 20, 552, 25);
            g2.setColor(Color.black);
            //g2.drawLine(1, 80, 600, 80);
            g2.setColor(Color.blue);

            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));

            int positionY = 190, positionX = 20;
            /*profile*/
            g2.setColor(Color.LIGHT_GRAY);

            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            //g2.drawRect(positionX, positionY, 550, 45);
            g2.setColor(Color.black);

            g2.drawString("Nom(s) et prenom(s) presonnel : " + memoire_intendance.nom.toUpperCase(), positionX + 100, positionY - 10);
            positionY += 15;
            g2.setColor(Color.blue);

            g2.drawString("Mois de paie   : " + memoire_intendance.classe, positionX + 10, positionY);
            // g2.drawRect(positionX, positionY, 650, 45);
            g2.setColor(Color.blue);

            g2.drawString("  Objet lié au paiement : " + memoire_intendance.but, positionX, positionY + 20);
            g2.setColor(Color.LIGHT_GRAY);

            g2.drawRect(positionX, positionY + 5, 550, 45);
            g2.setColor(Color.black);

            g2.drawString("  Montant  payé : " + memoire_intendance.prix + " FCFA", positionX, positionY + 40);
            g2.setColor(Color.LIGHT_GRAY);

            g2.drawRect(positionX, positionY + 5, 550, 45);
            g2.setColor(Color.DARK_GRAY);

            g2.drawString("Fait par Mr/Mdme : " + memoire_intendance.nom_user, positionX + 280, positionY + 75);
            g2.drawString("Signature :", positionX + 280, positionY + 90);
            positionY += 15;
            g2.setColor(Color.blue);

            return PAGE_EXISTS;
        }

    }

    class impression_recus_decharge extends JPanel implements Printable {

        public impression_recus_decharge() {
            PrinterJob pj = PrinterJob.getPrinterJob();
            pj.setPrintable(impression_recus_decharge.this);
            pj.printDialog();
            try {
                pj.setJobName("Impression");
                PageFormat pf = pj.defaultPage();
                Paper p = pf.getPaper();
                p.setImageableArea(1, 1, 1024, 1024);
                pf.setPaper(p);
                pf.setOrientation(PageFormat.PORTRAIT);
                System.out.println("pf.largeur hauteur()=" + pf.getHeight() + "  pf.largeur obtenu=" + pf.getWidth());
                pj.setPrintable(this, pf);
                pj.print();
            } catch (Exception PrintException) {
                JOptionPane.showMessageDialog(null, "Erreur lors de l'impression \n[ motif : " + PrintException.getMessage() + " ]");
                PrintException.printStackTrace();

            }
        }

        public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(Color.black);
            if (pageIndex > 0) {
                return NO_SUCH_PAGE;

            }
            g2.setColor(Color.DARK_GRAY);
            g2.drawImage((new ImageIcon(memoire_intendance.filigran)).getImage(), 430, 20, 100, 100, null);

            g2.drawString("Ministere des enseignements secondaires", 20, 20);
            g2.drawString("REPUBLIQUE DU CAMEROUN", 400, 20);
            g2.drawString("Paix-travail-patrie", 400, 30);
            g2.setColor(Color.black);

            g2.drawString("RECU DE DECHARGE DE FONDS", 220, 65);
            g2.setColor(Color.DARK_GRAY);

            g2.drawString(memoire.ecole, 20, 30);

            //g2.drawImage((new ImageIcon(report.getEntete().getLinkLogo())).getImage(), 250, 10,70, 50, null);
            g2.drawString("Annee Scolaire : " + memoire_intendance.anne_scolaire, 20, 40);

            g2.drawString("BP  :" + memoire_intendance.bp + " " + "   Tel : " + memoire_intendance.telephone, 20, 50);
            g2.setColor(Color.DARK_GRAY);

            g2.drawString("" + new SimpleDateFormat("EEEE, dd MMMM yyyy").format(new Date()), 20, 70);
            g2.setColor(Color.LIGHT_GRAY);

            g2.drawLine(1, 80, 600, 80);
            g2.setColor(Color.darkGray);

            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));

            int positionY = 110, positionX = 20;
            /*profile*/
            g2.setColor(Color.LIGHT_GRAY);

            g2.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));
            g2.drawRect(positionX, positionY, 550, 45);
            g2.setColor(Color.black);

            g2.drawString("NOMS BENEFICIAIRE : " + nom, positionX + 100, positionY - 10);
            positionY += 15;
            g2.setColor(Color.darkGray);

            g2.drawString("Code  : " + urObjctInCell, positionX + 10, positionY);
            // g2.drawRect(positionX, positionY, 650, 45);
            g2.setColor(Color.darkGray);

            g2.drawString("  Objet lié au paiement : " + objet, positionX, positionY + 20);
            g2.setColor(Color.LIGHT_GRAY);

            g2.drawRect(positionX, positionY + 5, 550, 45);
            g2.setColor(Color.darkGray);

            g2.drawString("  Montant  reçu : " + soldes + " FCFA", positionX, positionY + 40);
            g2.setColor(Color.LIGHT_GRAY);

            g2.drawRect(positionX, positionY + 5, 550, 45);
            g2.setColor(Color.DARK_GRAY);
            g2.drawString("signature bénéficiaire", positionX, positionY + 65);

            g2.drawString("Fait par Mr/Mdme : " + memoire_intendance.nom_user, positionX + 290, positionY + 85);
            g2.drawString("Signature :", positionX + 290, positionY + 95);
            positionY += 15;
            g2.setColor(Color.darkGray);

            return PAGE_EXISTS;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProviseurEcole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProviseurEcole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProviseurEcole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProviseurEcole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProviseurEcole().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel effectif;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}
