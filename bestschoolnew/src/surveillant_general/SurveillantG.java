package surveillant_general;

import etablissement.Curseur;
import etablissement.connexion;
import etablissement.impressionmodel_11;
import etablissement.justification_absence;
import etablissement.memoire;
import etablissement.model_eleves_pour_absences;
import intendancee.PasswordAuthentication;
import intendancee.autres;
import intendancee.memoire_intendance;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showConfirmDialog;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Benito
 */
public class SurveillantG extends javax.swing.JFrame {

    boolean io = false;
    public static String[] classe;
    String etatactuel;
    private JMenuItem general, gestion_absences, historique;

    public SurveillantG() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        liste_classe = new javax.swing.JComboBox<>();
        jToggleButton1 = new javax.swing.JToggleButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        effectif = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        anscences = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        liste_classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Classes diponibles" }));
        liste_classe.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                liste_classeItemStateChanged(evt);
            }
        });

        jToggleButton1.setText("Quitter");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jInternalFrame1.setVisible(true);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(20);
        jScrollPane1.setViewportView(jTable1);

        jTabbedPane1.addTab("Vue generale des absences", jScrollPane1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setRowHeight(32);
        jTable2.setSelectionBackground(new java.awt.Color(0, 102, 51));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jTable2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable2ComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jTabbedPane1.addTab("Justification des heures", jScrollPane2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setRowHeight(25);
        jTable3.setSelectionBackground(new java.awt.Color(102, 102, 255));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jTabbedPane1.addTab("Historique ", jScrollPane3);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 32, Short.MAX_VALUE))
        );

        anscences.setText("Gestion absences");
        jMenuBar1.add(anscences);

        jMenu2.setText("Modifier compte");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu1.setText("   Gestion finance");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(liste_classe, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(effectif, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToggleButton1)
                .addContainerGap())
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(effectif, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jToggleButton1)
                        .addComponent(liste_classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        int option = showConfirmDialog(null, "Voulez-vous quitter cette page ?", "Arrêt de la saisie des notes",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {
            JFrame Page_enseignant = new connexion();
            Page_enseignant.setVisible(true);
            dispose();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setExtendedState(SurveillantG.MAXIMIZED_BOTH);
        setTitle(" Bienvenue à  vous  <<     M. " + memoire.nom_user + "     >> dans votre espace de travail ");
        jToggleButton1.setBackground(Color.red);
        jInternalFrame1.getContentPane().setBackground(Color.blue);
        jToggleButton1.setForeground(Color.white);

        jInternalFrame1.setBackground(Color.red);
        try {
            liste_classemenu();
        } catch (IOException ex) {
            Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
        }
        general = new JMenuItem("Vue générale");
        gestion_absences = new JMenuItem("justfication heure");
        historique = new JMenuItem("Historique");

        general.setIcon(new ImageIcon("image/0.png"));
        gestion_absences.setIcon(new ImageIcon("image/5.png"));
        historique.setIcon(new ImageIcon("image/historique.png"));
        gestion_absences.setFont(new java.awt.Font("Segoe UI", 0, 12));
        historique.setFont(new java.awt.Font("Segoe UI", 0, 12));
        anscences.setIcon(new ImageIcon("image/6.png"));
        jMenu2.setIcon(new ImageIcon("image/compte.png"));
        jMenu1.setIcon(new ImageIcon("image/dollar.png"));

        anscences.add(general);
        anscences.add(gestion_absences);
        anscences.add(historique);
        historique.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                Curseur.jtablestartWaitCursor(jInternalFrame1);
                //String value = liste_classe.getSelectedItem().toString();
                setTitle("Vue generale Hisorique de justification des heures");

                final String list_des_elevs_par_classe = liste_classe.getSelectedItem().toString();
                try {
                    memoire.classe = list_des_elevs_par_classe;
                    liste_ele_deja_justifies(memoire.id_user);
                } catch (IOException ex) {
                    Curseur.jablestopWaitCursor(jInternalFrame1);

                    Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Curseur.jablestopWaitCursor(jInternalFrame1);

                    Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                }

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });
        gestion_absences.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {

                Curseur.jtablestartWaitCursor(jInternalFrame1);
                String value = liste_classe.getSelectedItem().toString();
                setTitle("Vue generale des abscences des élèves " + value);

                if (value.equals("Classes diponibles")) {
                    JOptionPane.showMessageDialog(null, "Veuillez séléctionner votre classe\n pour continuer");
                    Curseur.jablestopWaitCursor(jInternalFrame1);

                } else {
                    final String list_des_elevs_par_classe = liste_classe.getSelectedItem().toString();
                    try {
                        memoire.classe = list_des_elevs_par_classe;
                        memoire.numero_sequence = "s1";
                        liste_ele_classe(list_des_elevs_par_classe);
                    } catch (IOException ex) {
                        Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (JSONException ex) {
                        Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    Curseur.jablestopWaitCursor(jInternalFrame1);
                }
            }
        });
        general.addActionListener((java.awt.event.ActionEvent e) -> {
            Curseur.jtablestartWaitCursor(jInternalFrame1);
            String value = liste_classe.getSelectedItem().toString();
            setTitle("Vue generale des abscences des élèves " + value);

            if (value.equals("Classes diponibles")) {
                JOptionPane.showMessageDialog(null, "Veuillez séléctionner votre classe\n pour continuer");
                Curseur.jablestopWaitCursor(jInternalFrame1);

            } else {
                final String list_des_elevs_par_classe = liste_classe.getSelectedItem().toString();
                try {
                    memoire.classe = list_des_elevs_par_classe;
                    memoire.numero_sequence = "s1";
                    liste_ele_classegeneral(list_des_elevs_par_classe);
                } catch (IOException ex) {
                    Curseur.jablestopWaitCursor(jInternalFrame1);

                    Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Curseur.jablestopWaitCursor(jInternalFrame1);

                    Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                }

                Curseur.jablestopWaitCursor(jInternalFrame1);
            }
        });
        setIconImage(new ImageIcon(memoire.setup).getImage());

    }//GEN-LAST:event_formWindowOpened

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked

        setTitle("Modification du mot de passe");
        memoire_intendance.titre = getTitle();

        JOptionPane jop = new JOptionPane(), jop2 = new JOptionPane();

        String mo = JOptionPane.showInputDialog(null, "Veuillez Entrer votre nouveau mot de passe", "Entrer votre nouveau mot de passe", JOptionPane.QUESTION_MESSAGE);
        if (mo == null || (mo != null && ("".equals(mo)))) {
            JOptionPane.showMessageDialog(null, "votre mot de passe ne doit pas etre null", "ECHEC", JOptionPane.ERROR_MESSAGE);
            Curseur.jablestopWaitCursor(jInternalFrame1);

        } else {
            String no = JOptionPane.showInputDialog(null, "Veuillez Confirmer le mot de passe !", "Cofirmation mot de passe", JOptionPane.INFORMATION_MESSAGE);
            if (mo.equals(no)) {
                JOptionPane.showMessageDialog(null, "Votre compte a été bien modifié", "SUCCES", JOptionPane.INFORMATION_MESSAGE);

                try {
                    mdofifier_mot_passe(mo);
                } catch (IOException ex) {
                    Curseur.jablestopWaitCursor(jInternalFrame1);

                    Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                } catch (JSONException ex) {
                    Curseur.jablestopWaitCursor(jInternalFrame1);

                    Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Mot de passe mal confirmer", "ECHEC", JOptionPane.ERROR_MESSAGE);
                Curseur.jablestopWaitCursor(jInternalFrame1);

            }
            Curseur.jablestopWaitCursor(jInternalFrame1);

        }

        Curseur.jablestopWaitCursor(jInternalFrame1);

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        JFrame autres = new autres();
        autres.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jTable2ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable2ComponentShown
        Curseur.jtablestartWaitCursor(jInternalFrame1);
        String value = liste_classe.getSelectedItem().toString();
        setTitle("Vue generale des abscences des élèves " + value);

        if (value.equals("Classes diponibles")) {
            JOptionPane.showMessageDialog(null, "Veuillez séléctionner votre classe\n pour continuer");
            Curseur.jablestopWaitCursor(jInternalFrame1);

        } else {
            final String list_des_elevs_par_classe = liste_classe.getSelectedItem().toString();
            try {
                memoire.classe = list_des_elevs_par_classe;
                memoire.numero_sequence = "s1";
                liste_ele_classe(list_des_elevs_par_classe);
            } catch (IOException ex) {
                Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException ex) {
                Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
            }

            Curseur.jablestopWaitCursor(jInternalFrame1);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2ComponentShown

    private void liste_classeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_liste_classeItemStateChanged
        Curseur.startWaitCursor(this);
        Curseur.jtablestartWaitCursor(jInternalFrame1);
        String value = liste_classe.getSelectedItem().toString();
        setTitle("Vue generale des abscences des élèves " + value);

        if (value.equals("Classes diponibles")) {

        } else {
            Curseur.jtablestartWaitCursor(jInternalFrame1);
            final String list_des_elevs_par_classe = liste_classe.getSelectedItem().toString();
            try {
                memoire.classe = list_des_elevs_par_classe;
                memoire.numero_sequence = "s1";
                liste_ele_classe(list_des_elevs_par_classe);
                liste_ele_classegeneral(list_des_elevs_par_classe);
                liste_ele_deja_justifies(memoire.id_user);

            } catch (IOException ex) {
                Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException ex) {
                Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
            }

            Curseur.jablestopWaitCursor(jInternalFrame1);
            Curseur.stopWaitCursor(this);

        }
        Curseur.stopWaitCursor(this);
        // TODO add your handling code here:
    }//GEN-LAST:event_liste_classeItemStateChanged

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked

        int x;
        String urObjctInCell, nom, conf;

        JTable t = (JTable) evt.getSource();
        x = t.getSelectedRow();
        final int y = t.getSelectedColumn();
        urObjctInCell = (String) t.getValueAt(x, 0);
        nom = (String) t.getValueAt(x, 1);
        conf = (String) t.getValueAt(x, 7);

        // model.setValueAt("<html><font size=\"3\" face=\"verdana\" color=\"blue\"> En cours de traitement</font></html>", x, 7); 
        try {
            toutes_absences_eleves(urObjctInCell, nom);
        } catch (IOException ex) {
            Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked

        int x;
        String urObjctInCell, nom, conf;

        io = true;
        JTable t = (JTable) evt.getSource();
        x = t.getSelectedRow();
        final int y = t.getSelectedColumn();
        urObjctInCell = (String) t.getValueAt(x, 0);
        nom = (String) t.getValueAt(x, 1);
        conf = (String) t.getValueAt(x, 6);
        JOptionPane.showConfirmDialog(null, "Objectif de justification : \" " + conf + " .\"", "Justification des heures d'absences ", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        io = false;

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3MouseClicked
    public void liste_classemenu() throws IOException, JSONException {

        String url = memoire.liste_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        StringBuilder sb = new StringBuilder();
        URL urln = new URL(memoire.liste_classe);
        HttpURLConnection conn = (HttpURLConnection) urln.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        int responsecode = conn.getResponseCode();
        if (responsecode != 200) {
            throw new RuntimeException("HttpResponseCode: " + responsecode);
        } else {
            Scanner sc = new Scanner(urln.openStream());
            String inlinee = null;
            while (sc.hasNext()) {
                inlinee = sc.nextLine().trim();
            }

            org.json.JSONObject bj = new JSONObject(inlinee);
            org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
            String address = jsonArray.getJSONObject(0).getString("nom_classe");

            classe = new String[jsonArray.length()];

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject eleve = jsonArray.getJSONObject(i);

                String nom_eleve = eleve.getString("nom_classe");
                liste_classe.addItem(nom_eleve);

                classe[i] = nom_eleve;

            }
            Curseur.stopWaitCursor(this);

            sc.close();
        }
        Curseur.jablestopWaitCursor(jInternalFrame1);
    }

    public void mdofifier_mot_passe(String id) throws IOException, JSONException {

        PasswordAuthentication f = new PasswordAuthentication();

        String pass = f.hash(id);
        System.out.println("MOT de passe hashe : " + pass);

        String url = memoire_intendance.modifier_mot_passe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "password=" + pass + "&id_user=" + memoire_intendance.id_user;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        Curseur.jablestopWaitCursor(jInternalFrame1);

    }

    private void liste_ele_classe(String classe_choisie) throws IOException, JSONException {

        String url = memoire.liste_eleves_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + classe_choisie;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
        int totalEleves = jsonArray.length();
        List<impressionmodel_11> eleve = new ArrayList<impressionmodel_11>();
        effectif.setText("        "
                + "                                                                                         Effectif total : " + totalEleves);

        for (int i = 0; i < jsonArray.length(); i++) {
            impressionmodel_11 ed = new impressionmodel_11();

            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String datene = s11.getString("date_naissance");
            String sexe = s11.getString("sexe");
            String tel = s11.getString("absencejustifiee");
            String statut = s11.getString("absence_brute");
            String classe = s11.getString("nom_classe");

            String not = s11.getString("lieu_naissance");
            ed.nom(nom_eleve);
            ed.date(datene);
            ed.lnaissance(not);
            ed.sexe(sexe);
            ed.classe(classe);
            ed.moyenne(tel);// pour contact parents
            ed.total(statut);// pour absences non justifiees
            ed.note1(code); //pour absences non justifiees
            System.out.println(nom_eleve + " " + memoire.choix_sequence);
            eleve.add(ed);

        }
        in.close();
        String[] columnNames = {"CODE", "NOM ET PRENOMS", "Date de naissance", "Lieu de naissance", "sexe", "classe",
            "Absences non justifiés", "Absences justifiés", " Total Absences"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final impressionmodel_11 detail : eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.note1());
            row.add(detail.nom());
            row.add(detail.date());
            row.add(detail.lnaissance());
            row.add(detail.sexe());
            row.add(detail.classe());
            row.add(detail.total());
            row.add(detail.moyenne());

            row.add(String.valueOf(Integer.parseInt(detail.total()) - Integer.parseInt(detail.moyenne())));
            //            row.add(detail.getnote2());
            model.addRow(row);
        }
        jTable2.setModel(model);

        Curseur.jablestopWaitCursor(jInternalFrame1);
    }

    private void liste_ele_classegeneral(String classe_choisie) throws IOException, JSONException {

        String url = memoire.liste_eleves_classe;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "classe=" + classe_choisie;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
        int totalEleves = jsonArray.length();
        List<impressionmodel_11> eleve = new ArrayList<impressionmodel_11>();
        effectif.setText("                                                                                   Effectif total : " + totalEleves);

        for (int i = 0; i < jsonArray.length(); i++) {
            impressionmodel_11 ed = new impressionmodel_11();

            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String datene = s11.getString("date_naissance");
            String sexe = s11.getString("sexe");
            String tel = s11.getString("absencejustifiee");
            String statut = s11.getString("absence_brute");
            String classe = s11.getString("nom_classe");

            String not = s11.getString("lieu_naissance");
            ed.nom(nom_eleve);
            ed.date(datene);
            ed.lnaissance(not);
            ed.sexe(sexe);
            ed.classe(classe);
            ed.moyenne(tel);// pour contact parents
            ed.total(statut);// pour absences non justifiees
            ed.note1(code); //pour absences non justifiees
            System.out.println(nom_eleve + " " + memoire.choix_sequence);
            eleve.add(ed);

        }
        in.close();
        String[] columnNames = {"CODE", "NOM ET PRENOMS", "Date de naissance", "Lieu de naissance", "sexe", "classe",
            "Absences non justifiés", "Absences justifiés", " Total Absences"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final impressionmodel_11 detail : eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.note1());
            row.add(detail.nom());
            row.add(detail.date());
            row.add(detail.lnaissance());
            row.add(detail.sexe());
            row.add(detail.classe());
            row.add(detail.total());
            row.add(detail.moyenne());

            row.add(String.valueOf(Integer.parseInt(detail.total()) - Integer.parseInt(detail.moyenne())));
            //            row.add(detail.getnote2());
            model.addRow(row);
        }
        jTable1.setModel(model);

        Curseur.jablestopWaitCursor(jInternalFrame1);
    }

    private void liste_ele_deja_justifies(String classe_choisie) throws IOException, JSONException {

        String url = memoire.liste_eleves_justifie;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "id_surveillant=" + classe_choisie;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }

        org.json.JSONObject bj = new JSONObject(inline2);
        org.json.JSONArray jsonArray = bj.getJSONArray("victoire");
        int totalEleves = jsonArray.length();
        List<impressionmodel_11> eleve = new ArrayList<impressionmodel_11>();
        effectif.setText("                                                "
                + "Effectif total pour tous les elevs que vous avez deja justifie est de : " + totalEleves);

        for (int i = 0; i < jsonArray.length(); i++) {
            impressionmodel_11 ed = new impressionmodel_11();

            JSONObject s11 = jsonArray.getJSONObject(i);

            String code = s11.getString("id_eleve");

            String nom_eleve = s11.getString("nom");
            String datene = s11.getString("date_naissance");
            String sexe = s11.getString("date_justification");
            String tel = s11.getString("duree");
            String statut = s11.getString("motif");
            String classe = s11.getString("nom_classe");

            String not = s11.getString("matiere");
            ed.nom(nom_eleve);
            ed.date(datene);
            ed.lnaissance(not);
            ed.sexe(sexe);
            ed.classe(classe);
            ed.moyenne(tel);// pour contact parents
            ed.total(statut);// pour absences non justifiees
            ed.note1(code); //pour absences non justifiees
            System.out.println(nom_eleve + " " + memoire.choix_sequence);
            eleve.add(ed);

        }
        in.close();
        String[] columnNames = {"CODE", "NOM ET PRENOMS", "Date de naissance", "matiere concernee", "Date justification", "classe",
            "Objet justification", "Absences justifiés"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final impressionmodel_11 detail : eleve) {
            Vector<String> row = new Vector<>();
            row.add(detail.note1());
            row.add(detail.nom());
            row.add(detail.date());
            row.add(detail.lnaissance());
            row.add(detail.sexe());
            row.add(detail.classe());
            row.add(detail.total());
            row.add(detail.moyenne());

            //row.add(detail.);
            //            row.add(detail.getnote2());
            model.addRow(row);
        }
        //DefaultTableModel addColumn = model.addColumn(new(boolean.class));
        jTable3.setModel(model);

    }

    public boolean isCellEditable(int row, int col) {
        return false;
    }

    private void toutes_absences_eleves(String eleve_choisi, String nom) throws IOException, JSONException {
        org.json.JSONArray jsonArray = null;
        memoire.id_eleve = eleve_choisi;
        String url = memoire.liste_absences_eleves;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "id_eleve=" + eleve_choisi;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));

        System.out.println(urlParameters);

        String inputLine, inline2 = null;

        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine.trim());
            inline2 = inputLine.trim();
            System.out.println("Response Code : " + response.append(inputLine));

        }
        System.out.println("Response Code : " + response.append(inputLine));

        org.json.JSONObject bj = new JSONObject(inline2);
        try {
            jsonArray = bj.getJSONArray("victoire");

        } catch (JSONException ex) {
            JOptionPane.showConfirmDialog(null, "Désolé, mais il s'averait que cet élève ne présente pas d'absences", "Justification des heures d'absences ", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        }
        List<model_eleves_pour_absences> liste_eleve = new ArrayList<model_eleves_pour_absences>();

        int dureetotal = 0;
        String ojudui;
        ojudui = new SimpleDateFormat("EEEE, dd MMMM yyyy").format(new Date());

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject s11 = jsonArray.getJSONObject(i);

            String nom_eleve = s11.getString("duree");
            String code = s11.getString("id_absence");
            String matiere = s11.getString("matiere");
            String note1_eleve = s11.getString("appelleur");
            String note2_eleve = s11.getString("date").substring(10, 16);
            String n = s11.getString("date").trim().replace("-", "/").substring(0, 10);
            ojudui = new SimpleDateFormat("EEEE, dd MMMM yyyy").format(Date.parse(n));

            String etat = s11.getString("djustifie");

            dureetotal = dureetotal + Integer.parseInt(nom_eleve);

            liste_eleve.add(new model_eleves_pour_absences(code, nom_eleve, matiere, ojudui + " à " + note2_eleve, note1_eleve, etat));
            System.out.println(note2_eleve + " suite" + n);

        }
        in.close();

        final JFrame jInternalFrame1 = new JFrame("Liste des absences de l'élève : " + new Date());
        String[] columnNames = {"Durée en heure ", "Matiere", "Date du jour ", "Enseignant", "Code absence", "Déjà justifiée ?"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (final model_eleves_pour_absences detail : liste_eleve) {
            Vector<String> row = new Vector<>();

            row.add(detail.getUsername());
            row.add(detail.getclasse());
            row.add(detail.getnote());
            row.add(detail.getnote2());
            row.add(detail.id());
            row.add(detail.djajustifie());
            //            row.add(detail.getnote2());
            model.addRow(row);
        }

        JTable table = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table);

        JLabel lblHeading = new JLabel("                Gestion de l'eleve " + nom + "\n; son nombre total d'heures observe est : " + dureetotal);

        lblHeading.setFont(new Font("Roboto", Font.TRUETYPE_FONT, 12));
        setLocationRelativeTo(null);

        JPanel control = new JPanel();
        control.setBackground(Color.darkGray);

        JButton okBouton = new JButton("OK");
        okBouton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {

                setVisible(false);
            }

        });
        JButton cancelBouton = new JButton(" Quitter ");
        cancelBouton.addActionListener((ActionEvent arg0) -> {
            jInternalFrame1.dispose();
            try {
                liste_ele_classe(memoire.classe);
            } catch (IOException ex) {
                Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException ex) {
                Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        control.add(cancelBouton);
        jInternalFrame1.getContentPane().add(control, BorderLayout.SOUTH);

        //jInternalFrame1.getContentPane().add(lblHeading,BorderLayout.PAGE_START);
        jInternalFrame1.getContentPane().add(scrollPane, BorderLayout.CENTER);
        jInternalFrame1.setSize(750, 500);
        jInternalFrame1.setResizable(false);
        jInternalFrame1.setLocationRelativeTo(null);
        jInternalFrame1.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        jInternalFrame1.setIconImage(new ImageIcon(memoire.setup).getImage());

        table.addMouseListener(new MouseAdapter() {

            int x;
            String urObjctInCell, nom, conf;

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    JTable t = (JTable) e.getSource();
                    x = t.getSelectedRow();
                    final int y = t.getSelectedColumn();
                    memoire.duree_cours = (String) t.getValueAt(x, 0);
                    memoire.id_absence = (String) t.getValueAt(x, 4);
                    memoire.jour_cours = (String) t.getValueAt(x, 2);
                    etatactuel = (String) t.getValueAt(x, 5);

                    if (etatactuel.equals("non")) {
                        justification_absence zd;
                        try {
                            zd = new justification_absence(null, "Justification absences", true);
                            zd.showZDialog();
                        } catch (JSONException ex) {
                            Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(SurveillantG.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        model.setValueAt("<html><font size=\"3\" face=\"verdana\" color=\"red\"> En cours de traitement</font></html>", x, 4);
                        model.setValueAt(memoire.etatactuel, x, 5);
                    } else {
                        JOptionPane.showMessageDialog(null, "Désolé,\nmais vous ne pouvez une seconde fois justifier cette absence", "Erreur survenue", JOptionPane.ERROR_MESSAGE);

                    }
                }
            }
        });

        jInternalFrame1.setVisible(true);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SurveillantG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SurveillantG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SurveillantG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SurveillantG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SurveillantG().setVisible(true);
        });
    }
    private javax.swing.JTable tableau_details_eleves;
    private javax.swing.JScrollPane jScrollPanetableau_details_eleves;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu anscences;
    private javax.swing.JLabel effectif;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JComboBox<String> liste_classe;
    // End of variables declaration//GEN-END:variables
}
