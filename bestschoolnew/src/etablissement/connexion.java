/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etablissement;

import ecole_primaire.Page_enseignant3;
import enseignant.page_enseignant;
import enseignant.page_enseignant_laureat;
import intendancee.Intendancee;
import intendancee.autres;
import intendancee.fonctions_intendance;
import intendancee.memoire_intendance;
import intendancee.ProviseurEcole;
import intendancee.secretaire;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.json.JSONException;
import org.json.JSONObject;
import surveillant_general.SurveillantG;

/**
 *
 * @author Michelle Wafo
 */
public class connexion extends javax.swing.JFrame {

    String value = null;

    Curseur cureur = new Curseur();
    private String typeEtab;
    private Date todayDate, historyDate, futureDate, debut, fin;

    /**
     * Creates new form connexion
     */
    public connexion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        connexion = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        liste = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        ancien = new javax.swing.JButton();
        icon = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CONNECTEZ  -  VOUS");
        setBackground(new java.awt.Color(153, 153, 153));
        setLocation(new java.awt.Point(0, 0));
        setName("connexion"); // NOI18N
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setForeground(new java.awt.Color(0, 102, 0));

        connexion.setText("Connexion");
        connexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexionActionPerformed(evt);
            }
        });

        jLabel1.setText("Se connecter en tant que :");

        liste.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Votre identitié","Enseignant","Censeur","Intendant","Proviseur","Surv. Génér.","Secretaire","Autres","Parametres" }));
        liste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeActionPerformed(evt);
            }
        });

        jTextField1.setToolTipText("");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Login :");

        jLabel3.setText("Password");

        ancien.setText("Annuler");
        ancien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ancienActionPerformed(evt);
            }
        });

        icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/etablissement/akouma.png"))); // NOI18N
        icon.setText("Logo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(28, 28, 28)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(liste, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(ancien)
                        .addGap(131, 131, 131)
                        .addComponent(connexion)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(icon)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connexion)
                    .addComponent(ancien))
                .addGap(23, 23, 23))
        );

        connexion.getAccessibleContext().setAccessibleName("connexion");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 204));
        jLabel4.setText("WELCOME TO ");

        jLabel5.setFont(new java.awt.Font("Lucida Handwriting", 3, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 0));
        jLabel5.setText("BestSchool");

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/etablissement/aide.PNG"))); // NOI18N
        jLabel6.setLabelFor(icon);
        jLabel6.setText("Guide d'utilisation ");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(71, 71, 71))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("connexion");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void connexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connexionActionPerformed
        Curseur.startWaitCursor(this);

        int intb = 0;
        MySQLConnector n;
        n = new MySQLConnector();

        fonctions f = new fonctions();
        fonctions_intendance f2 = new fonctions_intendance();
        try {
            f2.lire();
        } catch (Exception rt) {
            JOptionPane.showMessageDialog(null, "Erreur : " + rt);

        }
        String fh = memoire.type;
        System.out.println(
                "Etablissement souhaite : " + memoire.type);
        typeEtab = fh;
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date debut = null;
        String ojudui;
        ojudui = new SimpleDateFormat("dd/MM/yyyy").format(new Date());

        String fileName = "libraries/benito/licence/police.txt";

        // This will reference one line at a time
        String line = null;
        System.out.println(
                "dbut '"
                + ojudui + "'");
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader
                    = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(
                        ""
                        + line + "'");
                debut = dateFormat.parse(line);
            }
            System.out.println(
                    "garde en memoire"
                    + debut + "'");

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + fileName + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");
            // Or we could just do this: 
            // ex.printStackTrace();
        } catch (ParseException ex) {
            Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            fin = dateFormat.parse("20/07/2019");
            todayDate = new Date();
            if (todayDate.before(debut)/* || todayDate.after(fin)*/) {
                JOptionPane.showMessageDialog(null, "Veuillez regler correctement la date\n de votre ordinateur");

            } else {

                try {
                    // Assume default encoding.
                    FileWriter fileWriter
                            = new FileWriter(fileName);

                    // Always wrap FileWriter in BufferedWriter.
                    BufferedWriter bufferedWriter
                            = new BufferedWriter(fileWriter);

                    // Note that write() does not automatically
                    // append a newline character.
                    bufferedWriter.write(ojudui);

                    // Always close files.
                    bufferedWriter.close();
                } catch (IOException ex) {
                    System.out.println(
                            "Error writing to file '"
                            + fileName + "'");
                    // Or we could just do this:
                    // ex.printStackTrace();
                }

                value = liste.getSelectedItem().toString();

                System.out.println("Response Code : " + value);

                String login = jTextField1.getText();
                char[] pass = jPasswordField1.getPassword();
                String mot_de_pass = new String(pass);

                if (value.equals("Votre identitié")) {
                    JOptionPane.showMessageDialog(null, "Veuillez séléctionner votre fonction de connexion");

                } else if (value.equals("Surv. Génér.") || value.equals("Autres") || value.equals("Proviseur") || value.equals("Intendant") || value.equals("Censeur") || value.equals("Secretaire")) {

                    Boolean cle = null;
                    try {
                        Curseur.startWaitCursor(this);

                        cle = f2.sendPost(login, mot_de_pass, value);
                        Curseur.stopWaitCursor(this);

                    } catch (Exception ex) {
                        Curseur.stopWaitCursor(this);

                        Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (cle == false) {
                        JOptionPane.showMessageDialog(null, "ACCES REFUSE");
//,,"Vice principal",,"Autres"
                        intb = 0;
                    } else {
                        String info = memoire_intendance.fonction;
                        try {
                            intb = 1;

                            if (info.equals("intendant")) {
                                new Intendancee().setVisible(true);
                                this.dispose();
                                this.setVisible(false);

                            } else if (info.equals("proviseur")) {
                                try {
                                    new ProviseurEcole().setVisible(true);
                                    dispose();
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, " erreur : " + e);
                                }
                                this.dispose();
                                this.setVisible(false);

                            } else if (value.equals("Autres")) {
                                new autres().setVisible(true);
                                this.dispose();
                                this.setVisible(false);

                            } else if (memoire_intendance.fonction.equals("secretaire")) {

                                new secretaire().setVisible(true);
                                this.dispose();
                                this.setVisible(false);

                            } else if (memoire_intendance.fonction.equals("Surv. Génér.")) {

                                new SurveillantG().setVisible(true);
                                this.dispose();
                                this.setVisible(false);

                            } else {
                                if (memoire_intendance.fonction.equals("censeur")) {

                                    try {
                                        lire();
                                    } catch (IOException ex) {
                                        Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (JSONException ex) {
                                        Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    if (typeEtab.equals("1- Lycee (sequences)")) {
                                        dispose();
                                        //new censeur2().setVisible(true);

                                    } else if (typeEtab.equals("2- college1 (cc/DS)")) {
                                        //new censeur().setVisible(true);
                                        this.dispose();
                                        this.setVisible(false);

                                    } else if (typeEtab.equals("4- ecole primaire (mensuel)")) {
                                        //new Censeur_ecole_public().setVisible(true);
                                        this.dispose();
                                        this.setVisible(false);

                                    } else if (typeEtab.equals("3- college2 (cc/ds/compo)")) {
                                        //new censeur_laureat().setVisible(true);
                                        this.dispose();
                                    } else if (typeEtab.equals("college3")) {
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Impossible de determiner le systeme educatif de votre ecole\n"
                                                + "Veuillez consulter  le manuel");

                                    }

                                }

                            }
                        } catch (Exception e) {
                        }
                    }
                } else if (value.equals("Parametres") && login.equals("333")) {
                    new parametres().setVisible(true);
                    this.dispose();
                    this.setVisible(false);
                    intb = 1;

                } else if (value.equals("Parametres") && login.equals("Jesus ne Fraude pas")) {
                    cle_key ajout_cle = new cle_key();

                    try {
                        ajout_cle.cle();
                    } catch (Exception ex) {
                        Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {

                    System.out.println(memoire.serveur);

                    Boolean cle = null;
                    try {
                        Curseur.startWaitCursor(this);

                        cle = f.sendPost(login, mot_de_pass, value);
                        Curseur.stopWaitCursor(this);

                    } catch (Exception ex) {
                        Curseur.stopWaitCursor(this);

                        Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (cle == false) {
                        JOptionPane.showMessageDialog(null, "ACCES REFUSE");
                        Curseur.stopWaitCursor(this);
                        intb = 0;

                    } else {
                        intb = 1;

                        if (value.equals("Enseignant")) {
                            JFrame fe;
                            if (typeEtab.equals("1- Lycee (sequences)")) {
                                Curseur.stopWaitCursor(this);

                                new page_enseignant2().setVisible(true);
                                System.out.println(" erreur 309");
                                this.dispose();
                            } else if (typeEtab.equals("4- ecole primaire (mensuel)")) {
                                Curseur.stopWaitCursor(this);

                                new Page_enseignant3().setVisible(true);
                                this.dispose();

                            } else if (typeEtab.equals("2- college1 (cc/DS)")) {
                                Curseur.stopWaitCursor(this);

                                new page_enseignant().setVisible(true);
                                this.dispose();

                            } else if (typeEtab.equals("3- college2 (cc/ds/compo)")) {
                                Curseur.stopWaitCursor(this);

                                fe = new page_enseignant_laureat();
                                fe.setVisible(true);
                                this.dispose();
                            }
                        }
                    }

                }

            }

        } catch (ParseException ex) {
            Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
        }

        Curseur.stopWaitCursor(this);

        if (intb == 1) {
            dispose();
        }
    }//GEN-LAST:event_connexionActionPerformed

    private void listeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_listeActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    private void formWindowClosed(java.awt.event.WindowEvent evt) {
        setDefaultCloseOperation(this.HIDE_ON_CLOSE);
        dispose();        // TODO add your handling code here:
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //   Curseur cureur = new Curseur();

        Curseur.startWaitCursor(this);
        String fileName = "libraries/benito/licence/ip.txt";

        // This will reference one line at a time
        String line = null, line1 = null, line2 = null, line3 = null;

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader
                    = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                memoire1.ip_adress = line;
            }
            System.out.println(memoire1.ip_adress);
            System.out.println(memoire.serveur);

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + fileName + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");
            // Or we could just do this: 
            // ex.printStackTrace();
        }

        String fileName1 = "libraries/benito/licence/ecole.txt";
        String fileName3 = "libraries/benito/licence/bp.txt";
        String fileName2 = "libraries/benito/licence/tel.txt";
        String fileName4 = "libraries/benito/typeetablissement.txt";

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName1);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader
                    = new BufferedReader(fileReader);

            while ((line1 = bufferedReader.readLine()) != null) {
                System.out.println(line1);
                //memoire.ecole=line1;
            }

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + fileName + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName4);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader
                    = new BufferedReader(fileReader);

            while ((line1 = bufferedReader.readLine()) != null) {
                System.out.println(line1);
                //typeEtab=line1;
            }

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + fileName + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName2);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader
                    = new BufferedReader(fileReader);

            while ((line2 = bufferedReader.readLine()) != null) {
                System.out.println(line2);
                //memoire.telephone_ecole=line2;
            }

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + fileName + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");
            // Or we could just do this: 
            // ex.printStackTrace();
        }

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName3);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader
                    = new BufferedReader(fileReader);

            while ((line3 = bufferedReader.readLine()) != null) {
                System.out.println(line3);
                memoire.bp=line3;
            }

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + fileName + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        //icon.setIcon((new ImageIcon(memoire.logo)));
        setIconImage(new ImageIcon(memoire.setup).getImage());
        try {
            lire();
        } catch (IOException ex) {
            Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setLocationRelativeTo(null);
        Curseur.stopWaitCursor(this);
        getRootPane().setDefaultButton(connexion);
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened
    private void lire() throws IOException, JSONException {

        String code = "";
        String url = memoire.lire_numero;

        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "password=" + code;

        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();
        System.out.println("\nSending 'POST' request to URL : " + url);
        System.out.println("Post parameters : " + urlParameters);
        System.out.println("Response Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
        System.out.println(urlParameters);
        String inputLine, test = null;
        StringBuffer response = new StringBuffer();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
            test = inputLine.trim();

            System.out.println(inputLine);

        }
        org.json.JSONObject bj = new JSONObject(test);

        org.json.JSONObject jsonArray = bj.getJSONObject("personne");
        memoire.numero = jsonArray.getString("personne");
        memoire.connecte = jsonArray.getString("etat");
        System.out.println("Numero : " + memoire.connecte);

    }
    private void ancienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ancienActionPerformed
        this.dispose();
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_ancienActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked

        File pdfFile = new File("image/GuideBestchool.pdf");
        if (pdfFile.exists()) {

            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(pdfFile);
                } catch (IOException ex) {
                    Logger.getLogger(connexion.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("Awt Desktop is not supported!");
            }

        } else {
            System.out.println("File is not exists!");
        }

    }//GEN-LAST:event_jLabel6MouseClicked
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        String fileName1 = "libraries/benito/licence/couleur.txt";
        String line1;
        line1 = "Nimbus";
        String line = null;
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(fileName1);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader
                    = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
                line1 = line;
            }

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + fileName1 + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName1 + "'");
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (line1.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new connexion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ancien;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton connexion;
    private javax.swing.JLabel icon;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> liste;
    // End of variables declaration//GEN-END:variables
}
